> v1 <- c("A001","A002","A003")
> v2 <- c("Mouse","Keyboard","USB")
> v3 <- c(30000,90000,50000)
> data.frame(v1,v2,v3)
    v1       v2    v3
1 A001    Mouse 30000
2 A002 Keyboard 90000
3 A003      USB 50000
> #행의 이름 설명해서 생성하기
> data.frame(row.names = v1,v2,v3)
           v2    v3
A001    Mouse 30000
A002 Keyboard 90000
A003      USB 50000
> #행의 이름 설정해서 생성하기
> product <- data.frame(id = v1,name=v2,price=v3)
> product
    id     name price
1 A001    Mouse 30000
2 A002 Keyboard 90000
3 A003      USB 50000
> #생성된 데이터의 내부 구조 보기
> str(product)
'data.frame':	3 obs. of  3 variables:
 $ id   : chr  "A001" "A002" "A003"
 $ name : chr  "Mouse" "Keyboard" "USB"
 $ price: num  30000 90000 50000
> mat <- matrix(c(1,3,5,7,9,
+               2,4,6,8,10,
+               2,3,5,7,11), ncol = 3)
> mat
     [,1] [,2] [,3]
[1,]    1    2    2
[2,]    3    4    3
[3,]    5    6    5
[4,]    7    8    7
[5,]    9   10   11
> #matrix to dataframe
> as.data.frame(mat)
  V1 V2 V3
1  1  2  2
2  3  4  3
3  5  6  5
4  7  8  7
5  9 10 11
> number <- as.data.frame(mat)
> number
  V1 V2 V3
1  1  2  2
2  3  4  3
3  5  6  5
4  7  8  7
5  9 10 11
> colnames(number) <- c("odd","even","prime")
> number
  odd even prime
1   1    2     2
2   3    4     3
3   5    6     5
4   7    8     7
5   9   10    11
> lst <- list(v1,v2,v3)
> lst
[[1]]
[1] "A001" "A002" "A003"

[[2]]
[1] "Mouse"    "Keyboard" "USB"     

[[3]]
[1] 30000 90000 50000

> as.data.frame(lst)
  c..A001....A002....A003.. c..Mouse....Keyboard....USB.. c.30000..90000..50000.
1                      A001                         Mouse                  30000
2                      A002                      Keyboard                  90000
3                      A003                           USB                  50000
> prd <- as.data.frame(lst)
> prd
  c..A001....A002....A003.. c..Mouse....Keyboard....USB.. c.30000..90000..50000.
1                      A001                         Mouse                  30000
2                      A002                      Keyboard                  90000
3                      A003                           USB                  50000
> colnames(prd)
[1] "c..A001....A002....A003.."     "c..Mouse....Keyboard....USB.." "c.30000..90000..50000."       
> colnames(prd) <- c("id","name","price")
> prd
    id     name price
1 A001    Mouse 30000
2 A002 Keyboard 90000
3 A003      USB 50000
> #행의개수 출력
> nrow(prd)
[1] 3
> #열의개수 출력
> ncol(prd)
[1] 3
> #열의 개수 반환
> length(prd)
[1] 3


> #데이터프레임 확장
> id <- c("A001","A002","A003")
> name <- c("Mouse","Keyboard","USB")
> price <- c(30000,90000,50000)
> product <- data.frame(id,name,price, 
+                       stringsAsFactors = FALSE)
> product
    id     name price
1 A001    Mouse 30000
2 A002 Keyboard 90000
3 A003      USB 50000
> #새로운 행 추가
> rbind(product,
+       c("A004","Monitor",250000))
    id     name  price
1 A001    Mouse  30000
2 A002 Keyboard  90000
3 A003      USB  50000
4 A004  Monitor 250000
> #새로운 행들을 추가 데이터프레임 형태로 된 새로운 행들을 추가 하는 것도 가능
> new.rows <- data.frame(id=c("A005","A006"), 
+                        name=c("Meomory", "CPU"),
+                        price=c(35000,320000))
> new.rows
    id    name  price
1 A005 Meomory  35000
2 A006     CPU 320000
> rbind(product, new.rows)
    id     name  price
1 A001    Mouse  30000
2 A002 Keyboard  90000
3 A003      USB  50000
4 A005  Meomory  35000
5 A006      CPU 320000
> product
    id     name price
1 A001    Mouse 30000
2 A002 Keyboard 90000
3 A003      USB 50000
> #새로운 행 추가
> product <- rbind(product,
+       c("A004","Monitor",250000))
> product
    id     name  price
1 A001    Mouse  30000
2 A002 Keyboard  90000
3 A003      USB  50000
4 A004  Monitor 250000
> new.rows
    id    name  price
1 A005 Meomory  35000
2 A006     CPU 320000
> product <- rbind(product, new.rows)
> product
    id     name  price
1 A001    Mouse  30000
2 A002 Keyboard  90000
3 A003      USB  50000
4 A004  Monitor 250000
5 A005  Meomory  35000
6 A006      CPU 320000
> #새로운 열 추가
> product <- cbind(product, 
+                  madein=c("Korea","China","China","Korea","Korea","USA"))
> product
    id     name  price madein
1 A001    Mouse  30000  Korea
2 A002 Keyboard  90000  China
3 A003      USB  50000  China
4 A004  Monitor 250000  Korea
5 A005  Meomory  35000  Korea
6 A006      CPU 320000    USA
> #다른 방법으로 열 추가하기
> product$madein2 <- c("Korea","China","China","Korea","Korea","USA")
> product
    id     name  price madein madein2
1 A001    Mouse  30000  Korea   Korea
2 A002 Keyboard  90000  China   China
3 A003      USB  50000  China   China
4 A004  Monitor 250000  Korea   Korea
5 A005  Meomory  35000  Korea   Korea
6 A006      CPU 320000    USA     USA

> #데이터프레임 확장
> id <- c("A001","A002","A003")
> name <- c("Mouse","Keyboard","USB")
> price <- c(30000,90000,50000)
> product <- data.frame(id,name,price, 
+                       stringsAsFactors = FALSE)
> #새로운 행 추가
> product <- rbind(product,
+       c("A004","Monitor",250000))
> #새로운 행들을 추가 데이터프레임 형태로 된 새로운 행들을 추가 하는 것도 가능
> new.rows <- data.frame(id=c("A005","A006"), 
+                        name=c("Meomory", "CPU"),
+                        price=c(35000,320000))
> product <- rbind(product, new.rows)
> product
    id     name  price
1 A001    Mouse  30000
2 A002 Keyboard  90000
3 A003      USB  50000
4 A004  Monitor 250000
5 A005  Meomory  35000
6 A006      CPU 320000
> #다른 방법으로 열 추가하기
> product$madein2 <- c("Korea","China","China","Korea","Korea","USA")
> product
    id     name  price madein2
1 A001    Mouse  30000   Korea
2 A002 Keyboard  90000   China
3 A003      USB  50000   China
4 A004  Monitor 250000   Korea
5 A005  Meomory  35000   Korea
6 A006      CPU 320000     USA
> new.cols <- data.frame(manufacture=c("Logitech","Logitech","Samsung","Samsung","Samsung","Intel"),
+                        quantity=c(20,15,50,30,40,10))
> new.cols
  manufacture quantity
1    Logitech       20
2    Logitech       15
3     Samsung       50
4     Samsung       30
5     Samsung       40
6       Intel       10
> #다른 방법으로 열 추가하기2
> product <- cbind(product, new.cols)
> product
    id     name  price madein2 manufacture quantity
1 A001    Mouse  30000   Korea    Logitech       20
2 A002 Keyboard  90000   China    Logitech       15
3 A003      USB  50000   China     Samsung       50
4 A004  Monitor 250000   Korea     Samsung       30
5 A005  Meomory  35000   Korea     Samsung       40
6 A006      CPU 320000     USA       Intel       10
> #컬럼명이 중복되도 추가 가능하다
> cols1 <- data.frame(x=c("a","b","c"),
+                     y=c(1,2,3))
> cols2 <- data.frame(x=c("alpha","beta","gamma"),
+                     y=c(100,200,300))
> cols1
  x y
1 a 1
2 b 2
3 c 3
> cols2
      x   y
1 alpha 100
2  beta 200
3 gamma 300
> #컬럼명이 중복되도 추가 가능하다
> cbind(cols1,cols2)
  x y     x   y
1 a 1 alpha 100
2 b 2  beta 200
3 c 3 gamma 300
> 
> #여러개의 dataframe을 한번에 bind 가능
> df1 <- data.frame(sex="female",months=1, weight=3.5)
> df2 <- data.frame(sex="male",months=3, weight=4.8)
> df3 <- data.frame(sex="male",months=4, weight=5.3)
> df4 <- data.frame(sex="female",months=9, weight=9.4)
> df5 <- data.frame(sex="female",months=7, weight=8.3)
> lst <- list(df1,df2,df3,df4,df5)
> lst
[[1]]
     sex months weight
1 female      1    3.5

[[2]]
   sex months weight
1 male      3    4.8

[[3]]
   sex months weight
1 male      4    5.3

[[4]]
     sex months weight
1 female      9    9.4

[[5]]
     sex months weight
1 female      7    8.3

> str(lst)
List of 5
 $ :'data.frame':	1 obs. of  3 variables:
  ..$ sex   : chr "female"
  ..$ months: num 1
  ..$ weight: num 3.5
 $ :'data.frame':	1 obs. of  3 variables:
  ..$ sex   : chr "male"
  ..$ months: num 3
  ..$ weight: num 4.8
 $ :'data.frame':	1 obs. of  3 variables:
  ..$ sex   : chr "male"
  ..$ months: num 4
  ..$ weight: num 5.3
 $ :'data.frame':	1 obs. of  3 variables:
  ..$ sex   : chr "female"
  ..$ months: num 9
  ..$ weight: num 9.4
 $ :'data.frame':	1 obs. of  3 variables:
  ..$ sex   : chr "female"
  ..$ months: num 7
  ..$ weight: num 8.3
> lst[[1]]
     sex months weight
1 female      1    3.5
> lst[[2]]
   sex months weight
1 male      3    4.8
> #리스트 안에 있는 원소로(dataframe)로 dataframe을 만들 수 있음
> rbind(lst[[1]],lst[[2]])
     sex months weight
1 female      1    3.5
2   male      3    4.8
> #많은 수의 작업을 할 때
> do.call(rbind, lst) #rbind를 수행. lst에 있는 원소를 가지고 차례로 돌아가면서 수행행
     sex months weight
1 female      1    3.5
2   male      3    4.8
3   male      4    5.3
4 female      9    9.4
5 female      7    8.3
> #데이터가 리스트형태 일 때
> lst1 <- list(sex="female",months=1, weight=3.5)
> lst2 <- list(sex="male",months=3, weight=4.8)
> lst3 <- list(sex="male",months=4, weight=5.3)
> lst4 <- list(sex="female",months=9, weight=9.4)
> lst5 <- list(sex="female",months=7, weight=8.3)
> lst1 <- list(lst1,lst2,lst3,lst4,lst5)
> lst1
[[1]]
[[1]]$sex
[1] "female"

[[1]]$months
[1] 1

[[1]]$weight
[1] 3.5


[[2]]
[[2]]$sex
[1] "male"

[[2]]$months
[1] 3

[[2]]$weight
[1] 4.8


[[3]]
[[3]]$sex
[1] "male"

[[3]]$months
[1] 4

[[3]]$weight
[1] 5.3


[[4]]
[[4]]$sex
[1] "female"

[[4]]$months
[1] 9

[[4]]$weight
[1] 9.4


[[5]]
[[5]]$sex
[1] "female"

[[5]]$months
[1] 7

[[5]]$weight
[1] 8.3


> lst1[[1]]
$sex
[1] "female"

$months
[1] 1

$weight
[1] 3.5

> #리스트를 데이터프레임으로 만들어 줘야함
> as.data.frame(lst[[1]])
     sex months weight
1 female      1    3.5

> #리스트가 데이터프레임으로 변함
> lapply(lst1,as.data.frame)
[[1]]
     sex months weight
1 female      1    3.5

[[2]]
   sex months weight
1 male      3    4.8

[[3]]
   sex months weight
1 male      4    5.3

[[4]]
     sex months weight
1 female      9    9.4

[[5]]
     sex months weight
1 female      7    8.3
> #리스트를 데이터프레임으로 만들어 줘야함
> #리스트가 데이터프레임으로 변함 아래 한 문장으로 해결됨
> do.call(rbind,lapply(lst1,as.data.frame))
     sex months weight
1 female      1    3.5
2   male      3    4.8
3   male      4    5.3
4 female      9    9.4
5 female      7    8.3



> #데이터프레임 인덱싱1
> ?state
> state.abb
 [1] "AL" "AK" "AZ" "AR" "CA" "CO" "CT" "DE" "FL" "GA" "HI" "ID" "IL" "IN" "IA" "KS" "KY" "LA" "ME" "MD" "MA" "MI"
[23] "MN" "MS" "MO" "MT" "NE" "NV" "NH" "NJ" "NM" "NY" "NC" "ND" "OH" "OK" "OR" "PA" "RI" "SC" "SD" "TN" "TX" "UT"
[45] "VT" "VA" "WA" "WV" "WI" "WY"
> state.area
 [1]  51609 589757 113909  53104 158693 104247   5009   2057  58560  58876   6450  83557  56400  36291  56290
[16]  82264  40395  48523  33215  10577   8257  58216  84068  47716  69686 147138  77227 110540   9304   7836
[31] 121666  49576  52586  70665  41222  69919  96981  45333   1214  31055  77047  42244 267339  84916   9609
[46]  40815  68192  24181  56154  97914
> state.name
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> state.region
 [1] South         West          West          South         West          West          Northeast    
 [8] South         South         South         West          West          North Central North Central
[15] North Central North Central South         South         Northeast     South         Northeast    
[22] North Central North Central South         North Central West          North Central West         
[29] Northeast     Northeast     West          Northeast     South         North Central North Central
[36] South         West          Northeast     Northeast     South         North Central South        
[43] South         West          Northeast     South         West          South         North Central
[50] West         
Levels: Northeast South North Central West
> #데이터프레임 생성
> us.state <- data.frame(state.abb, state.name, state.region, state.area,
+                        stringsAsFactors = FALSE)
> us.state
   state.abb     state.name  state.region state.area
1         AL        Alabama         South      51609
2         AK         Alaska          West     589757
3         AZ        Arizona          West     113909
4         AR       Arkansas         South      53104
5         CA     California          West     158693
6         CO       Colorado          West     104247
7         CT    Connecticut     Northeast       5009
8         DE       Delaware         South       2057
9         FL        Florida         South      58560
10        GA        Georgia         South      58876
11        HI         Hawaii          West       6450
12        ID          Idaho          West      83557
13        IL       Illinois North Central      56400
14        IN        Indiana North Central      36291
15        IA           Iowa North Central      56290
16        KS         Kansas North Central      82264
17        KY       Kentucky         South      40395
18        LA      Louisiana         South      48523
19        ME          Maine     Northeast      33215
20        MD       Maryland         South      10577
21        MA  Massachusetts     Northeast       8257
22        MI       Michigan North Central      58216
23        MN      Minnesota North Central      84068
24        MS    Mississippi         South      47716
25        MO       Missouri North Central      69686
26        MT        Montana          West     147138
27        NE       Nebraska North Central      77227
28        NV         Nevada          West     110540
29        NH  New Hampshire     Northeast       9304
30        NJ     New Jersey     Northeast       7836
31        NM     New Mexico          West     121666
32        NY       New York     Northeast      49576
33        NC North Carolina         South      52586
34        ND   North Dakota North Central      70665
35        OH           Ohio North Central      41222
36        OK       Oklahoma         South      69919
37        OR         Oregon          West      96981
38        PA   Pennsylvania     Northeast      45333
39        RI   Rhode Island     Northeast       1214
40        SC South Carolina         South      31055
41        SD   South Dakota North Central      77047
42        TN      Tennessee         South      42244
43        TX          Texas         South     267339
44        UT           Utah          West      84916
45        VT        Vermont     Northeast       9609
46        VA       Virginia         South      40815
47        WA     Washington          West      68192
48        WV  West Virginia         South      24181
49        WI      Wisconsin North Central      56154
50        WY        Wyoming          West      97914
> str(us.state)
'data.frame':	50 obs. of  4 variables:
 $ state.abb   : chr  "AL" "AK" "AZ" "AR" ...
 $ state.name  : chr  "Alabama" "Alaska" "Arizona" "Arkansas" ...
 $ state.region: Factor w/ 4 levels "Northeast","South",..: 2 4 4 2 4 4 1 2 2 2 ...
 $ state.area  : num  51609 589757 113909 53104 158693 ...
> us.state[[2]]
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> str(us.state[[2]])
 chr [1:50] "Alabama" "Alaska" "Arizona" "Arkansas" "California" "Colorado" "Connecticut" "Delaware" ...
> us.state[2]#데이터프레임의 형태
       state.name
1         Alabama
2          Alaska
3         Arizona
4        Arkansas
5      California
6        Colorado
7     Connecticut
8        Delaware
9         Florida
10        Georgia
11         Hawaii
12          Idaho
13       Illinois
14        Indiana
15           Iowa
16         Kansas
17       Kentucky
18      Louisiana
19          Maine
20       Maryland
21  Massachusetts
22       Michigan
23      Minnesota
24    Mississippi
25       Missouri
26        Montana
27       Nebraska
28         Nevada
29  New Hampshire
30     New Jersey
31     New Mexico
32       New York
33 North Carolina
34   North Dakota
35           Ohio
36       Oklahoma
37         Oregon
38   Pennsylvania
39   Rhode Island
40 South Carolina
41   South Dakota
42      Tennessee
43          Texas
44           Utah
45        Vermont
46       Virginia
47     Washington
48  West Virginia
49      Wisconsin
50        Wyoming
> us.state[c(2,4)]#데이터프레임의 형태
       state.name state.area
1         Alabama      51609
2          Alaska     589757
3         Arizona     113909
4        Arkansas      53104
5      California     158693
6        Colorado     104247
7     Connecticut       5009
8        Delaware       2057
9         Florida      58560
10        Georgia      58876
11         Hawaii       6450
12          Idaho      83557
13       Illinois      56400
14        Indiana      36291
15           Iowa      56290
16         Kansas      82264
17       Kentucky      40395
18      Louisiana      48523
19          Maine      33215
20       Maryland      10577
21  Massachusetts       8257
22       Michigan      58216
23      Minnesota      84068
24    Mississippi      47716
25       Missouri      69686
26        Montana     147138
27       Nebraska      77227
28         Nevada     110540
29  New Hampshire       9304
30     New Jersey       7836
31     New Mexico     121666
32       New York      49576
33 North Carolina      52586
34   North Dakota      70665
35           Ohio      41222
36       Oklahoma      69919
37         Oregon      96981
38   Pennsylvania      45333
39   Rhode Island       1214
40 South Carolina      31055
41   South Dakota      77047
42      Tennessee      42244
43          Texas     267339
44           Utah      84916
45        Vermont       9609
46       Virginia      40815
47     Washington      68192
48  West Virginia      24181
49      Wisconsin      56154
50        Wyoming      97914
> #두번째 열을 출력하고 싶다
> us.state[,2]
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> us.state[,2,drop=FALSE] #기존의 형태 그대로 출력력
       state.name
1         Alabama
2          Alaska
3         Arizona
4        Arkansas
5      California
6        Colorado
7     Connecticut
8        Delaware
9         Florida
10        Georgia
11         Hawaii
12          Idaho
13       Illinois
14        Indiana
15           Iowa
16         Kansas
17       Kentucky
18      Louisiana
19          Maine
20       Maryland
21  Massachusetts
22       Michigan
23      Minnesota
24    Mississippi
25       Missouri
26        Montana
27       Nebraska
28         Nevada
29  New Hampshire
30     New Jersey
31     New Mexico
32       New York
33 North Carolina
34   North Dakota
35           Ohio
36       Oklahoma
37         Oregon
38   Pennsylvania
39   Rhode Island
40 South Carolina
41   South Dakota
42      Tennessee
43          Texas
44           Utah
45        Vermont
46       Virginia
47     Washington
48  West Virginia
49      Wisconsin
50        Wyoming
> us.state[,c(2,4)]#두번째,네번째 열을 출력
       state.name state.area
1         Alabama      51609
2          Alaska     589757
3         Arizona     113909
4        Arkansas      53104
5      California     158693
6        Colorado     104247
7     Connecticut       5009
8        Delaware       2057
9         Florida      58560
10        Georgia      58876
11         Hawaii       6450
12          Idaho      83557
13       Illinois      56400
14        Indiana      36291
15           Iowa      56290
16         Kansas      82264
17       Kentucky      40395
18      Louisiana      48523
19          Maine      33215
20       Maryland      10577
21  Massachusetts       8257
22       Michigan      58216
23      Minnesota      84068
24    Mississippi      47716
25       Missouri      69686
26        Montana     147138
27       Nebraska      77227
28         Nevada     110540
29  New Hampshire       9304
30     New Jersey       7836
31     New Mexico     121666
32       New York      49576
33 North Carolina      52586
34   North Dakota      70665
35           Ohio      41222
36       Oklahoma      69919
37         Oregon      96981
38   Pennsylvania      45333
39   Rhode Island       1214
40 South Carolina      31055
41   South Dakota      77047
42      Tennessee      42244
43          Texas     267339
44           Utah      84916
45        Vermont       9609
46       Virginia      40815
47     Washington      68192
48  West Virginia      24181
49      Wisconsin      56154
50        Wyoming      97914
> #name열을 출력하고 싶다 방법 3가지
> us.state[["state.name"]]
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> us.state$state.name
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> us.state[,"state.name"]
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> us.state[c("state.name", "state.area")]#데이터프레임의 형태 #리스트인덱싱
       state.name state.area
1         Alabama      51609
2          Alaska     589757
3         Arizona     113909
4        Arkansas      53104
5      California     158693
6        Colorado     104247
7     Connecticut       5009
8        Delaware       2057
9         Florida      58560
10        Georgia      58876
11         Hawaii       6450
12          Idaho      83557
13       Illinois      56400
14        Indiana      36291
15           Iowa      56290
16         Kansas      82264
17       Kentucky      40395
18      Louisiana      48523
19          Maine      33215
20       Maryland      10577
21  Massachusetts       8257
22       Michigan      58216
23      Minnesota      84068
24    Mississippi      47716
25       Missouri      69686
26        Montana     147138
27       Nebraska      77227
28         Nevada     110540
29  New Hampshire       9304
30     New Jersey       7836
31     New Mexico     121666
32       New York      49576
33 North Carolina      52586
34   North Dakota      70665
35           Ohio      41222
36       Oklahoma      69919
37         Oregon      96981
38   Pennsylvania      45333
39   Rhode Island       1214
40 South Carolina      31055
41   South Dakota      77047
42      Tennessee      42244
43          Texas     267339
44           Utah      84916
45        Vermont       9609
46       Virginia      40815
47     Washington      68192
48  West Virginia      24181
49      Wisconsin      56154
50        Wyoming      97914
> us.state[,c("state.name", "state.area")]#데이터프레임의 형태 #행렬인덱싱
       state.name state.area
1         Alabama      51609
2          Alaska     589757
3         Arizona     113909
4        Arkansas      53104
5      California     158693
6        Colorado     104247
7     Connecticut       5009
8        Delaware       2057
9         Florida      58560
10        Georgia      58876
11         Hawaii       6450
12          Idaho      83557
13       Illinois      56400
14        Indiana      36291
15           Iowa      56290
16         Kansas      82264
17       Kentucky      40395
18      Louisiana      48523
19          Maine      33215
20       Maryland      10577
21  Massachusetts       8257
22       Michigan      58216
23      Minnesota      84068
24    Mississippi      47716
25       Missouri      69686
26        Montana     147138
27       Nebraska      77227
28         Nevada     110540
29  New Hampshire       9304
30     New Jersey       7836
31     New Mexico     121666
32       New York      49576
33 North Carolina      52586
34   North Dakota      70665
35           Ohio      41222
36       Oklahoma      69919
37         Oregon      96981
38   Pennsylvania      45333
39   Rhode Island       1214
40 South Carolina      31055
41   South Dakota      77047
42      Tennessee      42244
43          Texas     267339
44           Utah      84916
45        Vermont       9609
46       Virginia      40815
47     Washington      68192
48  West Virginia      24181
49      Wisconsin      56154
50        Wyoming      97914
> #기본제공 데이터셋 미국의 주에 대한 정보들이 있음
> state.x77
               Population Income Illiteracy Life Exp Murder HS Grad Frost   Area
Alabama              3615   3624        2.1    69.05   15.1    41.3    20  50708
Alaska                365   6315        1.5    69.31   11.3    66.7   152 566432
Arizona              2212   4530        1.8    70.55    7.8    58.1    15 113417
Arkansas             2110   3378        1.9    70.66   10.1    39.9    65  51945
California          21198   5114        1.1    71.71   10.3    62.6    20 156361
Colorado             2541   4884        0.7    72.06    6.8    63.9   166 103766
Connecticut          3100   5348        1.1    72.48    3.1    56.0   139   4862
Delaware              579   4809        0.9    70.06    6.2    54.6   103   1982
Florida              8277   4815        1.3    70.66   10.7    52.6    11  54090
Georgia              4931   4091        2.0    68.54   13.9    40.6    60  58073
Hawaii                868   4963        1.9    73.60    6.2    61.9     0   6425
Idaho                 813   4119        0.6    71.87    5.3    59.5   126  82677
Illinois            11197   5107        0.9    70.14   10.3    52.6   127  55748
Indiana              5313   4458        0.7    70.88    7.1    52.9   122  36097
Iowa                 2861   4628        0.5    72.56    2.3    59.0   140  55941
Kansas               2280   4669        0.6    72.58    4.5    59.9   114  81787
Kentucky             3387   3712        1.6    70.10   10.6    38.5    95  39650
Louisiana            3806   3545        2.8    68.76   13.2    42.2    12  44930
Maine                1058   3694        0.7    70.39    2.7    54.7   161  30920
Maryland             4122   5299        0.9    70.22    8.5    52.3   101   9891
Massachusetts        5814   4755        1.1    71.83    3.3    58.5   103   7826
Michigan             9111   4751        0.9    70.63   11.1    52.8   125  56817
Minnesota            3921   4675        0.6    72.96    2.3    57.6   160  79289
Mississippi          2341   3098        2.4    68.09   12.5    41.0    50  47296
Missouri             4767   4254        0.8    70.69    9.3    48.8   108  68995
Montana               746   4347        0.6    70.56    5.0    59.2   155 145587
Nebraska             1544   4508        0.6    72.60    2.9    59.3   139  76483
Nevada                590   5149        0.5    69.03   11.5    65.2   188 109889
New Hampshire         812   4281        0.7    71.23    3.3    57.6   174   9027
New Jersey           7333   5237        1.1    70.93    5.2    52.5   115   7521
New Mexico           1144   3601        2.2    70.32    9.7    55.2   120 121412
New York            18076   4903        1.4    70.55   10.9    52.7    82  47831
North Carolina       5441   3875        1.8    69.21   11.1    38.5    80  48798
North Dakota          637   5087        0.8    72.78    1.4    50.3   186  69273
Ohio                10735   4561        0.8    70.82    7.4    53.2   124  40975
Oklahoma             2715   3983        1.1    71.42    6.4    51.6    82  68782
Oregon               2284   4660        0.6    72.13    4.2    60.0    44  96184
Pennsylvania        11860   4449        1.0    70.43    6.1    50.2   126  44966
Rhode Island          931   4558        1.3    71.90    2.4    46.4   127   1049
South Carolina       2816   3635        2.3    67.96   11.6    37.8    65  30225
South Dakota          681   4167        0.5    72.08    1.7    53.3   172  75955
Tennessee            4173   3821        1.7    70.11   11.0    41.8    70  41328
Texas               12237   4188        2.2    70.90   12.2    47.4    35 262134
Utah                 1203   4022        0.6    72.90    4.5    67.3   137  82096
Vermont               472   3907        0.6    71.64    5.5    57.1   168   9267
Virginia             4981   4701        1.4    70.08    9.5    47.8    85  39780
Washington           3559   4864        0.6    71.72    4.3    63.5    32  66570
West Virginia        1799   3617        1.4    69.48    6.7    41.6   100  24070
Wisconsin            4589   4468        0.7    72.48    3.0    54.5   149  54464
Wyoming               376   4566        0.6    70.29    6.9    62.9   173  97203
> str(state.x77)
 num [1:50, 1:8] 3615 365 2212 2110 21198 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:50] "Alabama" "Alaska" "Arizona" "Arkansas" ...
  ..$ : chr [1:8] "Population" "Income" "Illiteracy" "Life Exp" ...
> head(state.x77)
           Population Income Illiteracy Life Exp Murder HS Grad Frost   Area
Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708
Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432
Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417
Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945
California      21198   5114        1.1    71.71   10.3    62.6    20 156361
Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766
> #행렬형식이기 때문에 데이터프레임으로 변경
> states <- data.frame(state.x77)
> str(states)
'data.frame':	50 obs. of  8 variables:
 $ Population: num  3615 365 2212 2110 21198 ...
 $ Income    : num  3624 6315 4530 3378 5114 ...
 $ Illiteracy: num  2.1 1.5 1.8 1.9 1.1 0.7 1.1 0.9 1.3 2 ...
 $ Life.Exp  : num  69 69.3 70.5 70.7 71.7 ...
 $ Murder    : num  15.1 11.3 7.8 10.1 10.3 6.8 3.1 6.2 10.7 13.9 ...
 $ HS.Grad   : num  41.3 66.7 58.1 39.9 62.6 63.9 56 54.6 52.6 40.6 ...
 $ Frost     : num  20 152 15 65 20 166 139 103 11 60 ...
 $ Area      : num  50708 566432 113417 51945 156361 ...
> row.names(states)
 [1] "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"     "Colorado"      
 [7] "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"         "Idaho"         
[13] "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"       "Louisiana"     
[19] "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"      "Mississippi"   
[25] "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire"  "New Jersey"    
[31] "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"           "Oklahoma"      
[37] "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"   "Tennessee"     
[43] "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"     "West Virginia" 
[49] "Wisconsin"      "Wyoming"       
> states$Name <- row.names(states)
> row.names(states) <- NULL
> head(states)
  Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area       Name
1       3615   3624        2.1    69.05   15.1    41.3    20  50708    Alabama
2        365   6315        1.5    69.31   11.3    66.7   152 566432     Alaska
3       2212   4530        1.8    70.55    7.8    58.1    15 113417    Arizona
4       2110   3378        1.9    70.66   10.1    39.9    65  51945   Arkansas
5      21198   5114        1.1    71.71   10.3    62.6    20 156361 California
6       2541   4884        0.7    72.06    6.8    63.9   166 103766   Colorado
> rich.states <- states[states$Income>5000,
+                       c("Name","Income")]
> rich.states
           Name Income
2        Alaska   6315
5    California   5114
7   Connecticut   5348
13     Illinois   5107
20     Maryland   5299
28       Nevada   5149
30   New Jersey   5237
34 North Dakota   5087
> large.states <- states[states$Area>100000,
+                       c("Name","Area")]
> large.states
         Name   Area
2      Alaska 566432
3     Arizona 113417
5  California 156361
6    Colorado 103766
26    Montana 145587
28     Nevada 109889
31 New Mexico 121412
43      Texas 262134
> #두 데이터 프레임 합치기 merge
> merge(rich.states, large.states)
        Name Income   Area
1     Alaska   6315 566432
2 California   5114 156361
3     Nevada   5149 109889
> ?merge
> #all =FALSE 옵션이 기본이며 교집합 부분에 해당하는 데이터를 가져와서 합친다
> #all =True  합집합으로 데이터를 생성한다.
> merge(rich.states, large.states, all=TRUE)
           Name Income   Area
1        Alaska   6315 566432
2       Arizona     NA 113417
3    California   5114 156361
4      Colorado     NA 103766
5   Connecticut   5348     NA
6      Illinois   5107     NA
7      Maryland   5299     NA
8       Montana     NA 145587
9        Nevada   5149 109889
10   New Jersey   5237     NA
11   New Mexico     NA 121412
12 North Dakota   5087     NA
13        Texas     NA 262134









#데이터프레임 인덱싱2
#데이터프레임에 속한 컬럼명에 접근하려면 
#데이터프레임이름$컬럼명 으로 접근
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> iris$Sepal.Length
  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0
 [28] 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5
 [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5
 [82] 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3
[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1
[136] 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9
> iris$Sepal.Width
  [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4
 [28] 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3
 [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4
 [82] 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9
[109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6
[136] 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2 3.3 3.0 2.5 3.0 3.4 3.0
> r <- iris$Sepal.Length / iris$Sepal.Width
> r
  [1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615 1.352941 1.470588 1.517241 1.580645 1.459459 1.411765
 [13] 1.600000 1.433333 1.450000 1.295455 1.384615 1.457143 1.500000 1.342105 1.588235 1.378378 1.277778 1.545455
 [25] 1.411765 1.666667 1.470588 1.485714 1.529412 1.468750 1.548387 1.588235 1.268293 1.309524 1.580645 1.562500
 [37] 1.571429 1.361111 1.466667 1.500000 1.428571 1.956522 1.375000 1.428571 1.342105 1.600000 1.342105 1.437500
 [49] 1.432432 1.515152 2.187500 2.000000 2.225806 2.391304 2.321429 2.035714 1.909091 2.041667 2.275862 1.925926
 [61] 2.500000 1.966667 2.727273 2.103448 1.931034 2.161290 1.866667 2.148148 2.818182 2.240000 1.843750 2.178571
 [73] 2.520000 2.178571 2.206897 2.200000 2.428571 2.233333 2.068966 2.192308 2.291667 2.291667 2.148148 2.222222
 [85] 1.800000 1.764706 2.161290 2.739130 1.866667 2.200000 2.115385 2.033333 2.230769 2.173913 2.074074 1.900000
 [97] 1.965517 2.137931 2.040000 2.035714 1.909091 2.148148 2.366667 2.172414 2.166667 2.533333 1.960000 2.517241
[109] 2.680000 2.000000 2.031250 2.370370 2.266667 2.280000 2.071429 2.000000 2.166667 2.026316 2.961538 2.727273
[121] 2.156250 2.000000 2.750000 2.333333 2.030303 2.250000 2.214286 2.033333 2.285714 2.400000 2.642857 2.078947
[133] 2.285714 2.250000 2.346154 2.566667 1.852941 2.064516 2.000000 2.225806 2.161290 2.225806 2.148148 2.125000
[145] 2.030303 2.233333 2.520000 2.166667 1.823529 1.966667
> #변수이름만을 가지고 데이터프레임 내의 변수로 접근할 수 있도록 함
> r2 <- with(iris, Sepal.Length/Sepal.Width)
> head(r2)
[1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615

> #여러개의 작업을 할 수도 있음
> with(iris, {
+   print(summary(Sepal.Length))
+   plot(Sepal.Length, Sepal.Width)
+   plot(Petal.Length, Petal.Width)
+ })
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.300   5.100   5.800   5.843   6.400   7.900 
> #단점은 함수 내에서 이루어진 할당은 함수 밖에서 사용할 수 없다
> with(iris,{
+   stats <- summary(Sepal.Length)
+   stats
+ })
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.300   5.100   5.800   5.843   6.400   7.900 
> stats
Error: object 'stats' not found
> #단점은 함수 내에서 이루어진 할당은 함수 밖에서 사용하고 싶으면, <<-  연산자 사용
> with(iris,{
+   stats.keep <<- summary(Sepal.Length)
+   stats.nokeep <- summary(Sepal.Length)
+ })
> stats.keep
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.300   5.100   5.800   5.843   6.400   7.900 
> stats.nokeep
Error: object 'stats.nokeep' not found
> #with()랑 비슷하나 좀 더 할 수 있음 데이터프레임 내에서 변수 할당할 때 사용
> iris$Sepal.Ratio <- iris$Sepal.Length / iris$Sepal.Width
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Ratio
1          5.1         3.5          1.4         0.2  setosa    1.457143
2          4.9         3.0          1.4         0.2  setosa    1.633333
3          4.7         3.2          1.3         0.2  setosa    1.468750
4          4.6         3.1          1.5         0.2  setosa    1.483871
5          5.0         3.6          1.4         0.2  setosa    1.388889
6          5.4         3.9          1.7         0.4  setosa    1.384615
> iris <- within(iris,
+        Sepal.Ratio2 <- Sepal.Length/Sepal.Width)
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Ratio Sepal.Ratio2
1          5.1         3.5          1.4         0.2  setosa    1.457143     1.457143
2          4.9         3.0          1.4         0.2  setosa    1.633333     1.633333
3          4.7         3.2          1.3         0.2  setosa    1.468750     1.468750
4          4.6         3.1          1.5         0.2  setosa    1.483871     1.483871
5          5.0         3.6          1.4         0.2  setosa    1.388889     1.388889
6          5.4         3.9          1.7         0.4  setosa    1.384615     1.384615
> #굉장히 자주 사용한다. 하루종일 이 데이터로 작업한다. 메모리에 올려서 빠르게 접근 가능
> attach(iris)
> search()
 [1] ".GlobalEnv"        "iris"              "tools:rstudio"     "package:stats"     "package:graphics" 
 [6] "package:grDevices" "package:utils"     "package:datasets"  "package:methods"   "Autoloads"        
[11] "package:base"     
> r <- Sepal.Length/Sepal.Width
> head(r)
[1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615
> #탐색경로에서 제외할 때,
> detach(iris)
> search()
 [1] ".GlobalEnv"        "tools:rstudio"     "package:stats"     "package:graphics"  "package:grDevices"
 [6] "package:utils"     "package:datasets"  "package:methods"   "Autoloads"         "package:base"     
> attach(iris) #복사본이 탐색경로에 지정됨. 메모릴에 적재됨.
> iris$Sepal.Length <- 0 #원본에 값을 0으로 변경
> head(iris$Sepal.Length) #바뀐 값 확인
[1] 0 0 0 0 0 0
> Sepal.Length #메모리에 있는 값 확인. 원본과 다름
  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0
 [28] 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5
 [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5
 [82] 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3
[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1
[136] 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9
> detach(iris)
> #메모리에 복제된 값에 작업을 해도 원본과 다르다
> attach(iris)
> Sepal.Width <- Sepal.Width * 10 #변수에 값을 넣는 것 같지만, 새로운 변수를 선언하는 것과 같음
> head(Sepal.Width)
[1] 35 30 32 31 36 39
> ls()
[1] "iris"        "r"           "r2"          "Sepal.Width" "stats.keep" 
> head(iris$Sepal.Width)
[1] 3.5 3.0 3.2 3.1 3.6 3.9
> detach(iris)
> rm(Sepal.Width)
> #데이터프레임을 메모리에 올렸을 떄, 가지고 있는 변수명이 중복되어 문제가 발생할 수 있다
> Sepal.Length <- c(4.5,5.3,6.7)
> Sepal.Length
[1] 4.5 5.3 6.7
> attach(iris)#동일한 변수명을 가지고 있을 때 경고 메시지 발생생
The following object is masked _by_ .GlobalEnv:

    Sepal.Length

> #R에서 내가 생각한 변수와 다른 변수를 사용할 수 있다
> plot(Sepal.Length, Sepal.Width)
Error in xy.coords(x, y, xlabel, ylabel, log) : 
  'x' and 'y' lengths differ
> Sepal.Length #내가 따로 선언한 변수로 인지하고 있다
[1] 4.5 5.3 6.7






> #데이터프레임 인덱싱3
> ?subset()
> #subset(데이터프레임이름,조건,가져올컬럼명)
> head(mtcars)
                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> subset(mtcars, subset = (mpg>30), mpg)
                mpg
Fiat 128       32.4
Honda Civic    30.4
Toyota Corolla 33.9
Lotus Europa   30.4

> subset(mtcars, subset=(cyl==4 & am==0), select=c(mpg, hp, wt))
               mpg hp    wt
Merc 240D     24.4 62 3.190
Merc 230      22.8 95 3.150
Toyota Corona 21.5 97 2.465
> #조건에 함수도 사용 가능하다
> subset(mtcars, subset = (mpg>mean(mpg)), select = c(mpg, hp, wt))
                mpg  hp    wt
Mazda RX4      21.0 110 2.620
Mazda RX4 Wag  21.0 110 2.875
Datsun 710     22.8  93 2.320
Hornet 4 Drive 21.4 110 3.215
Merc 240D      24.4  62 3.190
Merc 230       22.8  95 3.150
Fiat 128       32.4  66 2.200
Honda Civic    30.4  52 1.615
Toyota Corolla 33.9  65 1.835
Toyota Corona  21.5  97 2.465
Fiat X1-9      27.3  66 1.935
Porsche 914-2  26.0  91 2.140
Lotus Europa   30.4 113 1.513
Volvo 142E     21.4 109 2.780



> head(USArrests)
           Murder Assault UrbanPop Rape
Alabama      13.2     236       58 21.2
Alaska       10.0     263       48 44.5
Arizona       8.1     294       80 31.0
Arkansas      8.8     190       50 19.5
California    9.0     276       91 40.6
Colorado      7.9     204       78 38.7
> cor(USArrests)
             Murder   Assault   UrbanPop      Rape
Murder   1.00000000 0.8018733 0.06957262 0.5635788
Assault  0.80187331 1.0000000 0.25887170 0.6652412
UrbanPop 0.06957262 0.2588717 1.00000000 0.4113412
Rape     0.56357883 0.6652412 0.41134124 1.0000000
> cor(USArrests)#상관계수 구해줌
             Murder   Assault   UrbanPop      Rape
Murder   1.00000000 0.8018733 0.06957262 0.5635788
Assault  0.80187331 1.0000000 0.25887170 0.6652412
UrbanPop 0.06957262 0.2588717 1.00000000 0.4113412
Rape     0.56357883 0.6652412 0.41134124 1.0000000
> subset(USArrests, select = -UrbanPop)
               Murder Assault Rape
Alabama          13.2     236 21.2
Alaska           10.0     263 44.5
Arizona           8.1     294 31.0
Arkansas          8.8     190 19.5
California        9.0     276 40.6
Colorado          7.9     204 38.7
Connecticut       3.3     110 11.1
Delaware          5.9     238 15.8
Florida          15.4     335 31.9
Georgia          17.4     211 25.8
Hawaii            5.3      46 20.2
Idaho             2.6     120 14.2
Illinois         10.4     249 24.0
Indiana           7.2     113 21.0
Iowa              2.2      56 11.3
Kansas            6.0     115 18.0
Kentucky          9.7     109 16.3
Louisiana        15.4     249 22.2
Maine             2.1      83  7.8
Maryland         11.3     300 27.8
Massachusetts     4.4     149 16.3
Michigan         12.1     255 35.1
Minnesota         2.7      72 14.9
Mississippi      16.1     259 17.1
Missouri          9.0     178 28.2
Montana           6.0     109 16.4
Nebraska          4.3     102 16.5
Nevada           12.2     252 46.0
New Hampshire     2.1      57  9.5
New Jersey        7.4     159 18.8
New Mexico       11.4     285 32.1
New York         11.1     254 26.1
North Carolina   13.0     337 16.1
North Dakota      0.8      45  7.3
Ohio              7.3     120 21.4
Oklahoma          6.6     151 20.0
Oregon            4.9     159 29.3
Pennsylvania      6.3     106 14.9
Rhode Island      3.4     174  8.3
South Carolina   14.4     279 22.5
South Dakota      3.8      86 12.8
Tennessee        13.2     188 26.9
Texas            12.7     201 25.5
Utah              3.2     120 22.9
Vermont           2.2      48 11.2
Virginia          8.5     156 20.7
Washington        4.0     145 26.2
West Virginia     5.7      81  9.3
Wisconsin         2.6      53 10.8
Wyoming           6.8     161 15.6

> #가져올 컬럼명 지정할 때, -인덱스 사용하면 빼고 사용 가능
> cor(subset(USArrests, select = -UrbanPop))
           Murder   Assault      Rape
Murder  1.0000000 0.8018733 0.5635788
Assault 0.8018733 1.0000000 0.6652412
Rape    0.5635788 0.6652412 1.0000000
> cor(subset(USArrests, select = -(UrbanPop,Rape)))
Error: unexpected ',' in "cor(subset(USArrests, select = -(UrbanPop,"
> cor(subset(USArrests, select = -c(UrbanPop,Rape)))
           Murder   Assault
Murder  1.0000000 0.8018733
Assault 0.8018733 1.0000000



> #SQL문장을 사용할 수 있게 해준다
> #install.packages("sqldf") #패키지 설치
> library(sqldf)
필요한 패키지를 로딩중입니다: gsubfn
필요한 패키지를 로딩중입니다: proto
필요한 패키지를 로딩중입니다: RSQLite
Warning messages:
1: 패키지 ‘sqldf’는 R 버전 4.1.3에서 작성되었습니다 
2: 패키지 ‘gsubfn’는 R 버전 4.1.3에서 작성되었습니다 
3: 패키지 ‘proto’는 R 버전 4.1.3에서 작성되었습니다 
4: 패키지 ‘RSQLite’는 R 버전 4.1.3에서 작성되었습니다 
> data("mtcars")
> sqldf("select * from mtcars where mpg>30", row.names=TRUE) #row.names=TRUE : 행의 이름도 같이 출력됨
                mpg cyl disp  hp drat    wt  qsec vs am gear carb
Fiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1
Lotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2
> sqldf("select * from mtcars where cyl=6 order by mpg", row.names = TRUE)
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
> sqldf("select avg(mpg) as avg_mpg, avg(wt) as avg_wt, gear from mtcars 
+       where cyl in (4,6) group by gear")
   avg_mpg   avg_wt gear
1 20.33333 3.046667    3
2 24.53333 2.616667    4
3 25.36667 2.141000    5
> data("iris") #데이터 불러오기
> #distinct 사용해서 종류 알 수 있음
> sqldf("select distinct Species from iris") 
     Species
1     setosa
2 versicolor
3  virginica
> sqldf("select * from iris limit 3")
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
> #SQL에서는 변수명에 . 을 사용할 수 없다
> #대신에 []를 이용해서 수행함
> sqldf("select avg([Sepal.Length]) from iris where Species='setosa'")
  avg([Sepal.Length])
1               5.006

> #대신에 "[]""를 이용해서 수행할 수 있으나 전체 쿼리문은 ''로 감싸야 함 주의할 것
> sqldf('select avg("Sepal.Length") from iris where Species="setosa"')
  avg("Sepal.Length")
1               5.006


1               5.006






> #데이터프레임 tibble
> library(tibble)
> search()
 [1] ".GlobalEnv"        "package:tibble"    "package:sqldf"     "package:RSQLite"   "package:gsubfn"   
 [6] "package:proto"     "tools:rstudio"     "package:stats"     "package:graphics"  "package:grDevices"
[11] "package:utils"     "package:datasets"  "package:methods"   "Autoloads"         "org:r-lib"        
[16] "package:base"     

> v1 <- c("A001","A002","A003")
> v2 <- c("Mouse","Keyboard","USB")
> v3 <- c(30000,90000,50000)
> #tibble 함수로 데이터프레임형식으로 만들 수 있다
> product <- tibble(id=v1, name=v2, price=v3)
> str(product)
tibble [3 x 3] (S3: tbl_df/tbl/data.frame)
 $ id   : chr [1:3] "A001" "A002" "A003"
 $ name : chr [1:3] "Mouse" "Keyboard" "USB"
 $ price: num [1:3] 30000 90000 50000
> product
# A tibble: 3 x 3
  id    name     price
  <chr> <chr>    <dbl>
1 A001  Mouse    30000
2 A002  Keyboard 90000
3 A003  USB      50000

> #tibble 아니고 tribble임 헷갈리지 말 것
> #작은 크기의 데이터셋을 생성할 때 편리하게 쓸 수 있다.
> tribble(
+   ~id, ~name, ~price,
+   "A001","Mouse",30000,
+   "A002","Keyboard",90000,
+   "A003","USB",50000,
+ )
# A tibble: 3 x 3
  id    name     price
  <chr> <chr>    <dbl>
1 A001  Mouse    30000
2 A002  Keyboard 90000
3 A003  USB      50000
> #List 열을 가지고 있는 tibble set을 만들 수 있다.
> tb <- tibble(id=c(1,2,3),
+              data=list(tibble(x=1,y=2),
+                        tibble(x=4:5,y=26:7),
+                        tibble(x=10)))
Error:
! Tibble columns must have compatible sizes.
* Size 2: Existing data.
* Size 20: Column `y`.
i Only values of size one are recycled.
Run `rlang::last_error()` to see where the error occurred.
> #List 열을 가지고 있는 tibble set을 만들 수 있다.
> tb <- tibble(id=c(1,2,3),
+              data=list(tibble(x=1,y=2),
+                        tibble(x=4:5,y=6:7),
+                        tibble(x=10)))
> tb
# A tibble: 3 x 2
     id data            
  <dbl> <list>          
1     1 <tibble [1 x 2]>
2     2 <tibble [2 x 2]>
3     3 <tibble [1 x 1]>
> tb$data
[[1]]
# A tibble: 1 x 2
      x     y
  <dbl> <dbl>
1     1     2

[[2]]
# A tibble: 2 x 2
      x     y
  <int> <int>
1     4     6
2     5     7

[[3]]
# A tibble: 1 x 1
      x
  <dbl>
1    10

> tb$data[[2]]
# A tibble: 2 x 2
      x     y
  <int> <int>
1     4     6
2     5     7
> str(iris)
'data.frame':	150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> #기존의 dataframe 형태를 tibble 형태로 바꾸기
> str(iris)
'data.frame':	150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> as_tibble(iris)
# A tibble: 150 x 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# ... with 140 more rows

> #메이저리거 정보 들어있는 패키지
> install.packages("Lahman")
> library(Lahman)
Warning message:
패키지 ‘Lahman’는 R 버전 4.1.3에서 작성되었습니다 
> str(Batting)
'data.frame':	108789 obs. of  22 variables:
 $ playerID: chr  "abercda01" "addybo01" "allisar01" "allisdo01" ...
 $ yearID  : int  1871 1871 1871 1871 1871 1871 1871 1871 1871 1871 ...
 $ stint   : int  1 1 1 1 1 1 1 1 1 1 ...
 $ teamID  : Factor w/ 149 levels "ALT","ANA","ARI",..: 136 111 39 142 111 56 111 24 56 24 ...
 $ lgID    : Factor w/ 7 levels "AA","AL","FL",..: 4 4 4 4 4 4 4 4 4 4 ...
 $ G       : int  1 25 29 27 25 12 1 31 1 18 ...
 $ AB      : int  4 118 137 133 120 49 4 157 5 86 ...
 $ R       : int  0 30 28 28 29 9 0 66 1 13 ...
 $ H       : int  0 32 40 44 39 11 1 63 1 13 ...
 $ X2B     : int  0 6 4 10 11 2 0 10 1 2 ...
 $ X3B     : int  0 0 5 2 3 1 0 9 0 1 ...
 $ HR      : int  0 0 0 2 0 0 0 0 0 0 ...
 $ RBI     : int  0 13 19 27 16 5 2 34 1 11 ...
 $ SB      : int  0 8 3 1 6 0 0 11 0 1 ...
 $ CS      : int  0 1 1 1 2 1 0 6 0 0 ...
 $ BB      : int  0 4 2 0 2 0 1 13 0 0 ...
 $ SO      : int  0 0 5 2 1 1 0 1 0 0 ...
 $ IBB     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ HBP     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ SH      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ SF      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ GIDP    : int  0 0 1 0 0 0 0 1 0 0 ...
> head(Batting)
   playerID yearID stint teamID lgID  G  AB  R  H X2B X3B HR RBI SB CS BB SO IBB HBP SH SF GIDP
1 abercda01   1871     1    TRO   NA  1   4  0  0   0   0  0   0  0  0  0  0  NA  NA NA NA    0
2  addybo01   1871     1    RC1   NA 25 118 30 32   6   0  0  13  8  1  4  0  NA  NA NA NA    0
3 allisar01   1871     1    CL1   NA 29 137 28 40   4   5  0  19  3  1  2  5  NA  NA NA NA    1
4 allisdo01   1871     1    WS3   NA 27 133 28 44  10   2  2  27  1  1  0  2  NA  NA NA NA    0
5 ansonca01   1871     1    RC1   NA 25 120 29 39  11   3  0  16  6  2  2  1  NA  NA NA NA    0
6 armstbo01   1871     1    FW1   NA 12  49  9 11   2   1  0   5  0  1  0  1  NA  NA NA NA    0
> Batting.tbl <- as_tibble(Batting)
> Batting.tbl
# A tibble: 108,789 x 22
   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR   RBI    SB    CS    BB    SO
   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>
 1 abercda01   1871     1 TRO    NA        1     4     0     0     0     0     0     0     0     0     0     0
 2 addybo01    1871     1 RC1    NA       25   118    30    32     6     0     0    13     8     1     4     0
 3 allisar01   1871     1 CL1    NA       29   137    28    40     4     5     0    19     3     1     2     5
 4 allisdo01   1871     1 WS3    NA       27   133    28    44    10     2     2    27     1     1     0     2
 5 ansonca01   1871     1 RC1    NA       25   120    29    39    11     3     0    16     6     2     2     1
 6 armstbo01   1871     1 FW1    NA       12    49     9    11     2     1     0     5     0     1     0     1
 7 barkeal01   1871     1 RC1    NA        1     4     0     1     0     0     0     2     0     0     1     0
 8 barnero01   1871     1 BS1    NA       31   157    66    63    10     9     0    34    11     6    13     1
 9 barrebi01   1871     1 FW1    NA        1     5     1     1     1     0     0     1     0     0     0     0
10 barrofr01   1871     1 BS1    NA       18    86    13    13     2     1     0    11     1     0     0     0
# ... with 108,779 more rows, and 5 more variables: IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>
> #출력되는 개수 조절하려면
> print(Batting.tbl, n=20)
# A tibble: 108,789 x 22
   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR   RBI    SB    CS    BB    SO
   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>
 1 abercda01   1871     1 TRO    NA        1     4     0     0     0     0     0     0     0     0     0     0
 2 addybo01    1871     1 RC1    NA       25   118    30    32     6     0     0    13     8     1     4     0
 3 allisar01   1871     1 CL1    NA       29   137    28    40     4     5     0    19     3     1     2     5
 4 allisdo01   1871     1 WS3    NA       27   133    28    44    10     2     2    27     1     1     0     2
 5 ansonca01   1871     1 RC1    NA       25   120    29    39    11     3     0    16     6     2     2     1
 6 armstbo01   1871     1 FW1    NA       12    49     9    11     2     1     0     5     0     1     0     1
 7 barkeal01   1871     1 RC1    NA        1     4     0     1     0     0     0     2     0     0     1     0
 8 barnero01   1871     1 BS1    NA       31   157    66    63    10     9     0    34    11     6    13     1
 9 barrebi01   1871     1 FW1    NA        1     5     1     1     1     0     0     1     0     0     0     0
10 barrofr01   1871     1 BS1    NA       18    86    13    13     2     1     0    11     1     0     0     0
11 bassjo01    1871     1 CL1    NA       22    89    18    27     1    10     3    18     0     1     3     4
12 battijo01   1871     1 CL1    NA        1     3     0     0     0     0     0     0     0     0     1     0
13 bealsto01   1871     1 WS3    NA       10    36     6     7     0     0     0     1     2     0     2     0
14 beaveed01   1871     1 TRO    NA        3    15     7     6     0     0     0     5     2     0     0     0
15 bechtge01   1871     1 PH1    NA       20    94    24    33     9     1     1    21     4     0     2     2
16 bellast01   1871     1 TRO    NA       29   128    26    32     3     3     0    23     4     4     9     2
17 berkena01   1871     1 PH1    NA        1     4     0     0     0     0     0     0     0     0     0     3
18 berryto01   1871     1 PH1    NA        1     4     0     1     0     0     0     0     0     0     0     0
19 berthha01   1871     1 WS3    NA       17    73    17    17     1     1     0     8     3     1     4     2
20 biermch01   1871     1 FW1    NA        1     2     0     0     0     0     0     0     0     0     1     0
# ... with 108,769 more rows, and 5 more variables: IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>
> print(Batting.tbl, n=3, width=Inf)
# A tibble: 108,789 x 22
  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR   RBI    SB    CS    BB    SO
  <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>
1 abercda01   1871     1 TRO    NA        1     4     0     0     0     0     0     0     0     0     0     0
2 addybo01    1871     1 RC1    NA       25   118    30    32     6     0     0    13     8     1     4     0
3 allisar01   1871     1 CL1    NA       29   137    28    40     4     5     0    19     3     1     2     5
    IBB   HBP    SH    SF  GIDP
  <int> <int> <int> <int> <int>
1    NA    NA    NA    NA     0
2    NA    NA    NA    NA     0
3    NA    NA    NA    NA     1
# ... with 108,786 more rows
> class(Batting.tbl)
[1] "tbl_df"     "tbl"        "data.frame"
> Batting.df <- as.data.frame(Batting.tbl)
> class(Batting.df)
[1] "data.frame"