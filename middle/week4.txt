o 행렬 생성, 행렬 인덱싱, 행렬 다루기, 배열

> v <- 1:12
> v
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
> dim(v) <- c(3,4)
> v
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> v <- 1:12
> matrix(data=v, nrow=3, ncol = 4)
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> matrix(data=v, nrow=3, ncol = 4, byrow = TRUE) #행의 방향으로 채워짐
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    5    6    7    8
[3,]    9   10   11   12
> rnames <- c("R1", "R2","R3")
> colnames <- c("C1", "C2","C3","C4")
> matrix(data=v, nrow = 3, ncol = 4,
+        dimnames = list(rnames, colnames)) #열, 행 이름 지정 가능능
   C1 C2 C3 C4
R1  1  4  7 10
R2  2  5  8 11
R3  3  6  9 12
> #같은 값을 넣고 싶을 때
> matrix(0,3,4) #0으로 채워진 r3, c4개까지 생김김
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
> ?matrix
> matrix(NA, 3, 4)
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA
[2,]   NA   NA   NA   NA
[3,]   NA   NA   NA   NA
> matrix(v, ncol=3) #r, c 중에 하나만 지정해줘도 계산해서 나머지 지정됨
     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12
> #내부구조 봐볼까
> mat <- matrix(v, ncol=4)
> str(mat)
 int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...
> dim(mat)
[1] 3 4
> dim(mat)[1] #행
[1] 3
> dim(mat)[2] #열의 수
[1] 4
> nrow(mat)
[1] 3
> ncol(mat)
[1] 4
> length(mat)#총 인자수수
[1] 12
> #벡터를 가지고 행렬만들기
> #rbind()
> #cbind()
> v1 <- c(1,2,3,4,5)
> v2 <- c(6,7,8,9,10)
> rbind(v1, v2)#행의 방향으로 결합된다다
   [,1] [,2] [,3] [,4] [,5]
v1    1    2    3    4    5
v2    6    7    8    9   10
> cbind(v1, v2)#열의 방향으로 결합된다
     v1 v2
[1,]  1  6
[2,]  2  7
[3,]  3  8
[4,]  4  9
[5,]  5 10
> 1:3
[1] 1 2 3
> 4:6
[1] 4 5 6
> matrix(7:12, 3,2)
     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12
> cbind(1:3, 4:6, matrix(7:12, 3,2)) #열의 방향으로 결합된다
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> matrix(1:6, 2,3)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> matrix(7:12, 2,3)
     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12
> rbind(matrix(1:6, 2,3), matrix(7:12, 2,3))#행의 방향으로 결합된다
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
[3,]    7    9   11
[4,]    8   10   12
> #행렬 연산
> mtx <- matrix(1:6, 2,3)
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> mtx+4
     [,1] [,2] [,3]
[1,]    5    7    9
[2,]    6    8   10
> mtx-2
     [,1] [,2] [,3]
[1,]   -1    1    3
[2,]    0    2    4
> mtx*3
     [,1] [,2] [,3]
[1,]    3    9   15
[2,]    6   12   18
> mtx/2
     [,1] [,2] [,3]
[1,]  0.5  1.5  2.5
[2,]  1.0  2.0  3.0
> a <-matrix(1:6, 2,3)
> b <-matrix(6:1, 2,3)
> a
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> b
     [,1] [,2] [,3]
[1,]    6    4    2
[2,]    5    3    1
> a+b
     [,1] [,2] [,3]
[1,]    7    7    7
[2,]    7    7    7
> a-b
     [,1] [,2] [,3]
[1,]   -5   -1    3
[2,]   -3    1    5
> a*b
     [,1] [,2] [,3]
[1,]    6   12   10
[2,]   10   12    6
> a/b
          [,1]     [,2] [,3]
[1,] 0.1666667 0.750000  2.5
[2,] 0.4000000 1.333333  6.0
> c <- matrix(6:1, 3,2)
> c
     [,1] [,2]
[1,]    6    3
[2,]    5    2
[3,]    4    1
> a
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> a+c
Error in a + c : non-conformable arrays
> a*c
Error in a * c : non-conformable arrays
> #정말 행렬 곱을 쓰고 싶으면 %*% 연산자를 써야 함
> a <- matrix(1:6, 2,3)
> a
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> b <- matrix(1:6, 3,2)
> b
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
> a %*% b #일반행렬곱곱
     [,1] [,2]
[1,]   22   49
[2,]   28   64
> c <- matrix(1:6, 2,3)
> c
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> a %*% c
Error in a %*% c : non-conformable arguments
> mtx <- matrix(1:6, 2,3)
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> mtx %*% 1:3 #1:3이란 벡터를 행렬로 바꿔서 연산을 해줌
     [,1]
[1,]   22
[2,]   28
> mtx %*% 1:2 #차원은 맞춰줘야 함함
Error in mtx %*% 1:2 : non-conformable arguments
> mtx <- matrix(1:6, 2,3)
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> mtx + 1:3
     [,1] [,2] [,3]
[1,]    2    6    7
[2,]    4    5    9
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> rowSums(mtx)
[1]  9 12
> colSums(mtx)
[1]  3  7 11
> rowMeans(mtx)
[1] 3 4
> colMeans(mtx)
[1] 1.5 3.5 5.5
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> t(mtx)
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
> a:5
[1] 1 2 3 4 5
Warning message:
In a:5 : numerical expression has 6 elements: only the first used
> :5
Error: unexpected ':' in ":"
> 1:5
[1] 1 2 3 4 5
> t(1:5)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
> mtx
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> mtx[2,]
[1] 2 4 6
> t(mtx[2,])
     [,1] [,2] [,3]
[1,]    2    4    6
> v
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
> mat <- matrix(v, 3, 4)
> mat
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> str(mat)
 int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...
> mat[1,]
[1]  1  4  7 10
> mat[,3]
[1] 7 8 9
> mat[1,,drop=FALSE] #drop 옵션으로 행렬의 형태 그대로 출력하게 만듬듬
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
> mat[,3,drop=FALSE] #drop 옵션으로 행렬의 형태 그대로 출력하게 만듬
     [,1]
[1,]    7
[2,]    8
[3,]    9
> mat[2:3,] #2,3번째 행과 모든 열열
     [,1] [,2] [,3] [,4]
[1,]    2    5    8   11
[2,]    3    6    9   12
> mat[,3,4] #3,4번째 열과 모든 행행
Error in mat[, 3, 4] : incorrect number of dimensions
> mat[,3:4] #3,4번째 열과 모든 행행
     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12
> mat[2:3,3:4]
     [,1] [,2]
[1,]    8   11
[2,]    9   12
> mat[c(1,3),] #1,3번째 행과 모든 열
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    3    6    9   12
> mat[,c(2,4)] #2,4번째 열과 모든 행, 인덱스는 새로이 부여됨됨
     [,1] [,2]
[1,]    4   10
[2,]    5   11
[3,]    6   12
> #음수인덱스는 해당 행,열이 제거된 행렬이 출력됨
> mat[,c(2,3)] # 2,3번 열이 제거됨
     [,1] [,2]
[1,]    4    7
[2,]    5    8
[3,]    6    9
> mat
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> mat[1,3] <- 77 #인덱스를 찾아서 해당 위치의 값을 변경할 수 있음
> mat
     [,1] [,2] [,3] [,4]
[1,]    1    4   77   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> mat[2,]
[1]  2  5  8 11
> mat[2,] <- c(22,55) #부족하면 재사용 귀칙으로 반복해서 채움
> mat
     [,1] [,2] [,3] [,4]
[1,]    1    4   77   10
[2,]   22   55   22   55
[3,]    3    6    9   12
> mat[2:3, 3:4]
     [,1] [,2]
[1,]   22   55
[2,]    9   12
> mat[2:3, 3:4] <- c(1,2,3,4)
> mat
     [,1] [,2] [,3] [,4]
[1,]    1    4   77   10
[2,]   22   55    1    3
[3,]    3    6    2    4
> city.distance <- c(0,331,238,269,195,331,0,95,194,189,238,95,0,171,130,269,194,171,77,195,189,130,77,0)
> length(city.distance)
[1] 24
> city.distance <- c(0,331,238,269,195,331,0,95,194,189,238,95,0,171,130,269,194,171,0,77,195,189,130,77,0)
> length(city.distance)
[1] 25
> city.distance.mat <- matrix(city.distance, 5,5, byrow=TRUE)
> city.distance
 [1]   0 331 238 269 195 331   0  95 194 189 238  95   0 171 130 269 194 171   0  77 195 189 130  77   0
> city.distance.mat
     [,1] [,2] [,3] [,4] [,5]
[1,]    0  331  238  269  195
[2,]  331    0   95  194  189
[3,]  238   95    0  171  130
[4,]  269  194  171    0   77
[5,]  195  189  130   77    0
> colnames(city.distance.mat) <- c("Seoul","Busan","Daegu","Gwangju","Jeonju")
> rownames(city.distance.mat) <- c("Seoul","Busan","Daegu","Gwangju","Jeonju")
> colnames(city.distance.mat)
[1] "Seoul"   "Busan"   "Daegu"   "Gwangju" "Jeonju" 
> rownames(city.distance.mat)
[1] "Seoul"   "Busan"   "Daegu"   "Gwangju" "Jeonju" 
> city.distance.mat
        Seoul Busan Daegu Gwangju Jeonju
Seoul       0   331   238     269    195
Busan     331     0    95     194    189
Daegu     238    95     0     171    130
Gwangju   269   194   171       0     77
Jeonju    195   189   130      77      0
> #서울부터 부산의 거리
> city.distance.mat["Seoul","Busan"]
[1] 331
> #서울부터 모든 도시의 거리
> city.distance.mat["Seoul",]
  Seoul   Busan   Daegu Gwangju  Jeonju 
      0     331     238     269     195 
> #몇몇 도시만 보고 싶다
> city.distance.mat[c("Seoul","Gwangju"),]
        Seoul Busan Daegu Gwangju Jeonju
Seoul       0   331   238     269    195
Gwangju   269   194   171       0     77
> a <- 1:24
> a
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
> dim(a) <- c(3,4,2) #차원을 부여함
> 
> a
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

, , 2

     [,1] [,2] [,3] [,4]
[1,]   13   16   19   22
[2,]   14   17   20   23
[3,]   15   18   21   24

> #배열을 만드는 함수 array
> array(1:12, c(2,3,2))
, , 1

     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

, , 2

     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12

> ary <- array(1:12, c(2,3,2))
> ary
, , 1

     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

, , 2

     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12

> ary[1,3,2]
[1] 11
> ary[,1,2]
[1] 7 8
> ary[,1,2,drop=FALSE]
, , 1

     [,1]
[1,]    7
[2,]    8

> ary[2,,]
     [,1] [,2]
[1,]    2    8
[2,]    4   10
[3,]    6   12