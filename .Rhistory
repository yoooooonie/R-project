diff(traffic.death)  #뒷자리에서 앞자리 뺀것들의 벡터로 나옴
diff(c(1,3,5,NA,3))
diff(1:5, lag=2)#2칸씩 떨어진 것의 차이를 구함
p <- 1:10
q <- 6:15
union(p,q)#합집합
intersect(p,q)#교집합
setdiff(p,q)#차집합
setdiff(q,p)#차집합
setequal(p,q)
setequal(q,p)
is.element(setdiff(p,q),q)
Sys.Date() #현재날짜
date()
Sys.time()
class(Sys.Date())
Sys.Date() #현재날짜
class(Sys.Date())#별도의 형식
date()
Sys.time()
as.Date("2025-12-31")#날짜 객체로 변환해줌
as.Date("2025/12/31")#날짜 객체로 변환해줌
Sys.Date() #현재날짜
class(Sys.Date())#별도의 형식
date()
Sys.time()
#YYYY-MM-DD or YYYY/MM/DD의 형태인 경우 날짜 객체로 변환해줌
as.Date("2025-12-31")#날짜 객체로 변환해줌
as.Date("2025/12/31")#날짜 객체로 변환해줌
as.date("12/31/2025", format("%m,/%d,/%Y")) #형식이 안 맞는 경우 format 지정해줘야함함
as.Date("12/31/2025", format("%m,/%d,/%Y")) #형식이 안 맞는 경우 format 지정해줘야함함
?strptime
d <- as.Date("2025-12-31")
d
format(d, format="%m,/%d,/%Y")
today <- Sys.Date()
today
format(today, format="%Y/%m/%d%A%a")
format(today, format="%Y/%m/%d %A %a")
d <- as.Date("2025-12-31")
d
weekdays(d)
#날짜도 연산이 가능함
d+7
d+1:7
weekdays(d+1:7)
seq(d, d+31, 2)
start <- as.Date("2025-01-01")
end <- as.Date("2025-01-31")
seq(start, end, by=1)
seq(start, by=1, length.out=7)
seq(start, by="7 days", length.out=7)
seq(start, by="week", length.out=7)
seq(start, by="month", length.out=7)
seq(start, by="year", length.out=7)
seq(start, by="10 years", length.out=7)
seq(from=as.Date("2025-01-30"), by="month", length.out=6)
#2월은 조심하기
seq(from=as.Date("2025-01-30"), by="month", length.out=6)
qrt <- seq(start, by="3 months", length.out=4)
quarters(qrt)
months(qrt)
Sys.getlocale()
Sys.setlocale("LC_TIME","C")
months(qrt)
Sys.setlocale("LC_TIME","Korean_Korea.949")
months(qrt)
as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m,%d, %H:%M:%S")
as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m,%d, %H:%M:%S")
pct <- as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m,%d, %H:%M:%S")
pct
pct <- as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m/%d, %H:%M:%S")
pct
class(pct)
as.integer(pct)
plt <- as.POSIXlt("2025/03/15, 15:03:04",
format="%Y/%m/%d, %H:%M:%S")
plt
class(plt)
unclass(plt)
plt$mday#경과된 날 수수
plt$mon
plt$year
dposix <- as.Date("2025/03/15")
dposix
as.POSIXlt(dposix)$wday
as.POSIXlt(dposix)$yday
as.POSIXlt(dposix)$year+1970
as.POSIXlt(dposix)$year+1900
strptime("2025-12-31", format="%Y-%m-%d")
class(strptime("2025-12-31", format="%Y-%m-%d"))
strptime("2025-12-31", format="%Y-%m-%d")$year+1900
moon <- as.POSIXct("1969/7/20, 20:17:39", format="%Y/%m/%d, %H:%M:%S",
tz="UTC")
moon
format(moon, "The time of the Apoloo landing was %Y/%m/%d, at %H:%M:%S.")
format(moon, "The time of the Apollo landing was %Y/%m/%d, at %H:%M:%S.")
#따로 있는 경우
y <- 2020
m <- 12
d <- 31
ISOdate(y,m,d)
class(ISOdate(y,m,d))
as.Date(ISOdate(y,m,d))
years <- c(2025:2028)
months <- c(1,4,7,10)
days <- c(12,19,25,17)
ISOdate(years, months, days)
#1970년 1월 1일 이후부터 경과한 날의 수로 저장됨 이러한 경우를 Julian date라고 한다
jdate <- as.Date("2025-12-31")
jdate
as.integer(jdate)
julian(jdate)
as.integer(as.Date("1970-01-01"))
as.integer(as.Date("1969-12-31"))
#julian date to date format
as.Date(as.integer(jdate), origin="1970-1-1")
moon
class(moon)
moon+ 60*60*2
moon+ 60*60*24*7
moon- 60*60*24*7
as.Date(moon)+7
#서울 올림픽 개최일 - 2020 평창올림픽 개최일
start <- as.Date("1988-9-17")
end <- as.Date("2018-2-9")
#서울 올림픽 개최일 - 2018 평창올림픽 개최일
start <- as.Date("1988-9-17")
end <- as.Date("2018-2-9")
end-start
today <- Sys.Date()
Dooly <- as.Date("1983-4-22")
ifftime(today, Dooly, units="days")
difftime(today, Dooly, units="days")
difftime(today, Dooly, units="weeks")
isTRUE(dooly>today)
isTRUE(Dooly>today)
Sys.time() > moon
Sys.Date() > moon
Sys.Date() > as.date(moon)
Sys.Date() > as.Date(moon)
#날짜 lubri
install.packages("lubridate")
#날짜 lubridate
#install.packages("lubridate")
library(lubridate)
today()
now()
ymd("2030-3-15")
mdy("3-15-2030")
dmy("15032030")
dmy("1532030")
dmy("112030")
dmy("0112030")
dmy("1012030")
dmy("01012030")
dmy("010130")
dmy("010187")
ymd("30-3-15")
ymd("2030년3월15일일")
mdy("3월 15일, 2030년년")
dmy("13-March-2030")
dmy("13th-march-2030")
mdy("March 15th, 2030")
Sys.setlocale("LC_TIME","C")
mdy("March 15th, 2030") #이건 안되넹 , locale을 바꾸고 실행하면 정상 동작
Sys.setlocale()
ymd(20300315)
ymd_hms("2030-3-15 23:11:59")
ymd_hm("2030-3-15 23:11")
ymd_h("2030-3-15 23")
years <- c(2030,2031,2032,2033)
months <- c(1,4,7,10)
days <- c(12,19,25,17)
hours <- c(3,7,11,20)
mins <- (15,5,27,55)
mins <- c(15,5,27,55)
mins <- c(5,12,33,59)
secs <- c(15,5,27,55)
data.frame(years, months, days, hours, mins, secs)
dt <- data.frame(years, months, days, hours, mins, secs)
dt
make_date(year=years, month = months, day = days)
make_datetime(year=years, month = months, day = days,
hour = hours, min = mins, sec = secs)
ymd("2030-3-15")
as_datetime(ymd("2030-3-15"))
as_date(ymd_hms("2030-3-15 23:11:23"))
#날짜 구성요소
datetime <- ymd_hms("1969/07/20, 20:17:39")
datetime
year(datetime)
month(datetime)
mday(datetime) #1969년에 몇번째 날인가가
mday(datetime)
hour(datetime)
minute(datetime)
second(datetime)
yday(datetime)
wday(datetime)
Sys.setlocale("LT_TIME","C")
Sys.setlocale("LT_TIME","c")
month(datetime, label=TRUE)
Sys.setlocale("LT_TIME","c")
Sys.setlocale("LC_TIME","c")
month(datetime, label=TRUE)
Sys.setlocale("LC_TIME","c")
Sys.setlocale("LC_TIME","C")
month(datetime, label=TRUE)
wday(datetime, label=TRUE, abbr=FALSE)
wday(datetime, label=TRUE)
wday(datetime)
wday(datetime, label=TRUE, abbr = TRUE)
wday(datetime, label=TRUE, abbr=FALSE)
wday(datetime, label=TRUE, abbr=FALSE)
Sys.setlocale()
month(datetiem, label = TRUE)
month(datetime, label = TRUE)
wday(datetime, label = TRUE)
datetime
year(datetime) <- 2030
datetime
month(datetime) <- 8
datetime
hour(datetime) <- hour(datetime)+1
datetime
update(datetime, year=2031, month=8,hour=11
datetime
update(datetime, year=2031, month=8,hour=11)
datetime
update(datetime, year=2031, month=8,hour=11)
datetime
update(datetime, yday=1)
#quarter 분기
datetime <- ymd_hms("1969/07/20, 20:17:39")
datetime
semester(datetime)
quarter(datetime)
am(datetime)
pm(datetime)
#반올림, 올림, 내림
round_date(datetime)
floor_date(datetime)
#반올림, 올림, 내림
round_date(datetime, unit = "year")
floor_date(datetime, unit = "month")
round_date(datetime, unit = "month")
#반올림, 올림, 내림
round_date(datetime, unit = "year")
round_date(datetime, unit = "month")
round_date(datetime, unit = "second")
round_date(datetime, unit = "hour")
round_date(datetime, unit = "day")
round_date(datetime, unit = "week")
ceiling_date(datetime, unit = "month")
#반올림, 내림, 올림
datetime
round_date(datetime, unit = "year")
round_date(datetime, unit = "month")
round_date(datetime, unit = "day")
round_date(datetime, unit = "week")
round_date(datetime, unit = "hour")
round_date(datetime, unit = "second")
floor_date(datetime, unit = "month")
ceiling_date(datetime, unit = "month")
years(1)
months(1)
months(3)
days(7)
weeks(2)
hours(c(12,24))
minutes(1:5)
seq(0,10,by2)
seq(0,10,by=2)
seq(0,10,,by=2)
seconds(seq(0,10,by=2))
10*(months(6)+days(2))
days(60)+hours(12)+minutes(15)
moon<- ymd_hms("1969/07/20")
moon
moon<- ymd_hms("1969/07/20")
moon<- ymd("1969/07/20")
moon
moon+days(10000)
moon+months(1000)
moon-years(100)
mars <- ymd("2021/02/18")
mars
mars-moon
interval(moon, mars)
class(interval(moon, mars))
moon %--% mars
as.period(moon %--% mars)
as.duration(moon %--% mars)
class(as.period(moon %--% mars))
class(as.duration(moon %--% mars))
dyears(1)
dyears(1) #초로 표현됨됨
ddays(1)
dweeks(1)
dours(1)
dhours(1)
2*dyears(1)
dyears(1)+dweeks(4)+dhours(2)
ymd("2029-01-01")+years(1)
ymd("2029-01-01")+dyears(1)
ymd("2028-01-01")+years(1)
ymd("2028-01-01")+dyears(1)
#윤년 때문에 다른 결과 나올 수 있음
ymd("2028-01-01")+years(1)
ymd("2028-01-01")+dyears(1)
leap_year(2028)
leap_year(2029)
years(1)/days(1)
(ymd("2028-01-01") %--% ymd("2029-01-01"))/dday(1)
(ymd("2028-01-01") %--% ymd("2029-01-01"))/ddays(1)
Sys.timezone()
#현재 사용중인 시간대
Sys.timezone()
OlsonNames()
kst <- ymd_hm("2030-3-15 15:30", tz="Asia/Seoul")
kst
utc <- ymd_hm("2030-3-15 6:30")
utc
kst-utc
#새해를 맞이하는 뉴욕시간
ny <-  ymd_hms("2030-01-01 00:00:00", tz="America/New_York")
ny
with_tz(ny, tzone="Asia/Seoul")
?read.csv
#데이터 프레임 형태로 불러옴
read.csv(file="product.csv")
#데이터 프레임 형태로 불러옴
read.csv(file="product.csv")
read.csv(file="product_no_header.csv")
read.csv(file="product_no_header.csv", header=FALSE)
?read.table
read.table(file = "product.txt")
read.table(file = "product.txt", header=TRUE)
read.table(file = "product_colon.txt", header=TRUE, sep=":")
#NA를 결측값으로 인식하도록 해야함
read.table(file = "product_missing.txt", header=TRUE)
read.table(file = "product_missing.txt", header=TRUE,
na.strings = ".")
#고정된 길이로 구분되는 경우
read.fwf(file = "product_fix.txt", widths = c(4,-1,10,8))
#열의 이름 주고 싶으면
read.fwf(file = "product_fix.txt", widths = c(4,-1,10,8),
col.names = c("id", "name","price"))
#데이터구조가 복잡하고 정형화되지 않은 경우
readLines(con="word.txt")
#데이터구조가 복잡하고 정형화되지 않은 경우
readLines(con="word.txt")
readLines(con="word.txt", n=2) #읽어올 라인 길이 입력
#what 인수에 어떤 형식으로 읽어올지 지정
scan(file = "word.txt", what = character())
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric())
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric()))
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric()))
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()))
#패턴을 지정할 수 있다, 특정 라인만 읽도록 지정 가능
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()),
nlines = 2)
#패턴을 지정할 수 있다, 특정 라인만 읽도록 지정 가능
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()),
skip=3)
library(openxlsx)
install.packages("openxlsx")
#install.packages("openxlsx")
library(openxlsx)
read.xlsx(xlsxFile = "product.xlsx", sheet = 1)
#출력
pi
sqrt(3)
print(pi)
print(sqrt(3))
#각 인수에 적합한 형태로 출력해준다
print(matrix(c(1,2,3,4), ncol=2))
print(list("Batman","Spiderman","Ironman"))
print("The Square root of 3 is", sqrt(3), ".")
#cat은 여러 인자 받음
cat("The Square root of 3 is", sqrt(3), ".")
#이스케이프 시퀀스 지정 가능
cat("The Square root of 3 is", sqrt(3), "\b.")
#커서 다음줄로 옮기기 위한 지정 필요
cat("The Square root of 3 is", sqrt(3), "\b.","\n")
#이스케이프 시퀀스 지정 가능
cat("The Square root of 3 is", sqrt(3), "\b.")
#커서 다음줄로 옮기기 위한 지정 필요
#console에서 실행해보면 차이점 알 수 있음
cat("The Square root of 3 is", sqrt(3), "\b.","\n")
name <- "Jenny"
cat("Hello",name, "\b.\n","Isn\'t it","\t","A Lovely day")
hero <- list("Batman","Spiderman","Ironman")
cat(hero)
cat(unlist(hero))
pi
pi*100
pi/100
print(pi, digits = 3)
print(pi*100, digits = 3)
#cat 함수로 출력 자리수 지정하는 경우는 format 사용
cat(format(pi, digits = 3),"\n")
pnorm(-3:3)
#유효자리수 3개로
print(pnorm(-3:3), digits = 3)
#유효자리수 3개로 가장 낮은 숫자를 일단 맞추고 나머지를 맞춤 그래서 소수 5째 자리까지 출력
print(pnorm(-3:3), digits = 3)
z <- c(0,1.64,1.96,2.58)
ptbl <- data.frame(Z=z, Lower=pnorm(-z), Upper=pnorm(z))
ptbl
print(ptbl, digits = 3)
prime <- c(2,3,5,7,11,13,17,19)
cat(prime, file="prime.txt", sep="\t", "\n")
#기존파일에 추가하기
id <- c("A001","A002","A003")
name <- c("Mouse", "Keyboard","USB")
price <- c(30000,90000,50000)
cat(id, file = "product_cat.txt", sep="\t","\n")
cat(name, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
cat(price, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
#연결객체를 먼저 생성하고 붙이기
con <- file("product_cat2.txt", open = "w")
cat(id, file = con, sep = "\t", "\n")
cat(name, file = con, sep = "\t", "\n")
cat(price, file = con, sep = "\t", "\n")
close(con)
#출력 결과 파일로 저장
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink("Fahrenheit_output.txt")
#출력 결과 파일로 저장
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink()
head(Orange)
write.csv(x=Orange, file = "orange.csv")
#행이름 필요 없으면
write.csv(x=Orange, file = "orange.csv", row.names = FALSE)
write.table(x=Orange, file = "orange.txt", sep=";", row.names = FALSE)
write.table(x=Orange, file = "orange.txt", sep=";", row.names = FALSE)
rm(list=ls())
ls()
z <- c(0,1.64,1.96,2.58)
ptbl <- data.frame(Z=z, Lower=pnorm(-z), Upper=pnorm(z))
ptbl
#중간 데이터 저장하기
save(ptbl, file="ptbl.RData")
rm(ptbl)
ls()
ptbl
#저장된 데이터 가져오기
load("ptbl.RData")
ptbl
#파일 검색
list.files()
#하위 파일까지 검색
list.files(recursive = TRUE)
#숨겨진 파일까지 다 보고 싶다
list.files(all.files = TRUE)
#패턴 넣어서 찾기
list.files(pattern ="*.txt")
#패턴 넣어서 찾기
list.files(pattern ="*.txt")
#패턴 넣어서 찾기
list.files(pattern ="*.csv")
#패턴 넣어서 찾기
list.files(pattern = "*.txt")
#패턴 넣어서 찾기
list.files(pattern = '*.txt')
#숨겨진 파일까지 다 보고 싶다
list.files(all.files = TRUE)
#패턴 넣어서 찾기
list.files(pattern = '*.R')
#패턴 넣어서 찾기
list.files(pattern = "*.R")
list.dirs()
#경로 지정해서 찾기
list.files(path = "./examples")
#경로 지정해서 찾기
list.files(path = "./ymyang")
file.create("temp.txt")
file.exitst("temp.txt")
file.exitsts("temp.txt")
file.create("temp.txt")
file.exists("temp.txt")
file.remove("temp.txt")
file.exists("temp.txt")
#경로 지정해서 찾기
list.files(path = "./middle")
#패턴 넣어서 찾기
list.files(pattern = "*.R")
