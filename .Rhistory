list(rnorm(mean=0, sd=1, n=1),
rnorm(mean=5, sd=2, n=3),
rnorm(mean=10, sd=3, n=5))
args.df <- data.frame(mean=c(0,5,10),
sd=c(1,2,3),
n=c(1,3,5))
args.df %>%
pmap(rnorm)
args.df
args.df %>%
pmap(rnorm)
#list 이름 없이
args2 <- list(c(0,5,10),
c(1,2,3),
c(1,3,5))
set.seed(123)
args2 %>%
pmap(rnorm)
?rnorm
read.csv(file = "C:/ymyang/word.txt")
read.csv(file = "C:/word.txt", header = FALSE)
read.csv(file = "C:/word.txt", header = FALSE)
read.csv(file = "C:/word.txt")
#reduce
library(purrr)
reduce(.x=c(1,3,5,7), .f=`*`) #연산자는 백틱? esc 아래키로 감싸서 사용
paste2 <- function(u,v,sep=".") paste(u, v, sep=sep)
letters[1:4] %>%
reduce(paste2)
data.frame(name="Batman", grade="A"))
dfs <- list(data.frame(name="Superman", age=30),
data.frame(name=c("Spiderman","Wonderwoman"), sex=c("M","F")),
data.frame(name="Batman", grade="A"))
dfs
library(dplyr)
dfs %>%
reduce(.f=bind_rows)
vs <- list(c(1,3,5,6,7,8,10),
c(2,3,7,8,10),
c(1,2,3,5,7,9,10))
vs
vs %>%
reduce(intersect)
set.seed(123)
x <- sample(10)
x
x %>%
reduce(`+`)
x %>%
accumulate(`+`)
reduce2(.x=letters[1:4],.y=c("-",".","-"),.f=paste2)
accumulate2(.x=letters[1:4],.y=c("-",".","-"),.f=paste2)
#reshape2
install.packages("reshape2")
#reshape2
#install.packages("reshape2")
library(reshape2)
smiths
#wide format to long format
melt(data = smiths)
?melt
melt(data = smiths, id.vars = "subject")
melt(data = smiths, id.vars = "variable")
melt(data = smiths, id.vars = "weight")
melt(data = smiths, measure.vars = "weight")
melt(data = smiths, measure.vars = c(2:5))
melt(data = smiths, measure.vars = c("time","age","weight","value","height"))
melt(data = smiths, measure.vars = c("time","age","weight","height"))
melt(data = smiths, id.vars = "weight", measure.vars = c("time","age","weight","height"))
melt(data = smiths, id.vars = "subject", measure.vars = c("time","age","weight","height"))
#열의 이름을 지정할 수 있음
melt(data = smiths, id.vars = "subject", measure.vars = c("time","age","weight","height"),
variable.name = "var", value.name = "val")
smiths.long <- melt(data = smiths, id.vars = "subject", measure.vars = c("time","age","weight","height"),
variable.name = "var", value.name = "val")
smiths.long
#long format to wide format
?dcast
dcast(data=smiths.long, furmula=subject~var)
dcast(data=smiths.long, formula=subject~var)
dcast(data=smiths.long, formula=subject~var, value.var = val)
dcast(data=smiths.long, formula=subject~var, value.var = "val")
head(airquality)
aq.long <- melt(airquality, id.vars = c("Month","Day"),
)
aq.long <- melt(airquality, id.vars = c("Month","Day"))
tail(aq.long)
aq.long <- melt(airquality, id.vars = c(1:2))
tail(aq.long)
aq.long <- melt(airquality, id.vars = c([-2:-1]))
aq.long <- melt(airquality, id.vars = c(-(2:1)))
tail(aq.long)
head(airquality)
aq.long <- melt(airquality, id.vars = c(5:6))
tail(aq.long)
aq.wide <- dcast(aq.long, Month+Day~variable,
value.var = "value")
head(aq.wide)
dcast(aq.long, Month~varible)
dcast(aq.long, Month~varible,
fun.aggregate = mean, na.rm=TRUE)
dcast(aq.long, Month~variable) #Month만 가지고는 되지 않음
dcast(aq.long, Month~variable,
fun.aggregate = mean, na.rm=TRUE)
install.packages("tidyr")
library(tidyr)
head(airquality)
#to make long format
?gather
aq.long <- gather(airquality,
key=Factor,
value = Measurement,
Ozone:Temp)
head(aq.long)
aq.long <- gather(airquality,
key=Factor,
value = Measurement,
-Month, -Day)
head(aq.long)
aq.long <- gather(airquality,
key=Factor,
value = Measurement,
Ozone,Temp,Solar.R, Wind)
head(aq.long)
airquality %>% gather(Factor, Measurement, Ozone:Teamp)
airquality %>% gather(Factor, Measurement, Ozone:Temp)
?spread
aq.wide <- spread(data = aq.long, key=Factor, value = Measurement)
head(aq.wide)
aq.wide <- aq.long %>% spread(key=Factor, value = Measurement)
head(aq.wide)
head(iris)
iris.long <- gather(iris, key=Element, value=Measurement,
-Species)
head(iris.long)
#두개의 열로 분할
?separate
iris.sep <- separate(data=iris.long,
col=Element,
into = c("Part","Measures"))
head(iris.sep)
#두개의 열로 분할
?separate
#두개의 열 합치기
?unite
iris.unite <- unite(data=iris.sep,
col=unite,
Part, Measures)
head(iris.unite)
iris.unite <- unite(data=iris.sep,
col=unite,
sep="."
Part, Measures)
iris.unite <- unite(data=iris.sep,
col=unite,
sep=".",
Part, Measures)
head(iris.unite)
iris.unite <- unite(data=iris.sep,
col=unite,
sep="-",
Part, Measures)
head(iris.unite)
#pivot_long(), pivot_wide()
head(airquality)
?pivot_longer
aq.long <- pivot_longer(airquality,
cols = Ozone:Temp,
names_to = "Factor",
values_to = "Measurement")
head(aq.long)
#long to wide
?pivot_wider
aq.wide <- pivot_wider(aq.long,
names_from  = Factor,
values_from  = Measurement)
head(aq.wide)
#nest
?nest
df <- tibble(x=c(1,1,1,2,2,3),y=1:6,z=6:1)
df
nest(.data=df, ndata=c(y,z))
df.nested <- nest(.data=df, ndata=c(y,z))
df.nested
df.nested$ndata
#list 형태이기에 추출할 때는
df.nested$ndata[[2]]
#원래대로 돌리기
unnest(df.nested, cols = ndata)
#여러개의 리스트를 갖는 데이터
head(iris)
iris.nested <- nest(iris, sepal=c("Sepal.Length","Sepal.Width"),
petal=c("Petal.Length","Petal.Width"))
iris.nested
iris.nested$sepal
iris.nested$petal
#group by
head(mtcars)
library(dplyr)
mtcars %>%
group_by(cyl) %>%
nest()
mtcars.n <- mtcars %>%
group_by(cyl) %>%
nest()
mtcars.n
library(purrr)
mtcars.m <- mtcars.n %>%
mutate(model=map(data, ~lm(mpg~wt, data = .x))) %>%
arrange(cyl)
mtcars.m
mtcars.m$model
#회귀계수 추출하기
mtcars.m %>%
transmute(cyl, beta=map_dbl(model, ~coefficients(.)[[2]])) %>%
ungroup()
#week13
#그래픽
#graphics 패키지가 기본으로 설치되어 있다
str(faithful)
plot(faithful)
eruptions.long <- faithful[faithful$eruptions>3,]
plot(faithful)
points(eruptions.long, col="red",pch=19)
points(eruptions.long, col="red",pch=30) #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red",pch=30) #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red") #저수준, 고수준이 먼저 수행되어 있어야 함
#week13
#그래픽
#graphics 패키지가 기본으로 설치되어 있다
#volcano eruption data
str(faithful)
plot(faithful) #고수준
eruptions.long <- faithful[faithful$eruptions>3,]
points(eruptions.long, col="red") #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red" pch=30) #저수준, 고수준이 먼저 수행되어 있어야 함
plot(faithful) #고수준
points(eruptions.long, col="red" pch=30) #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red" pch=19) #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red" pch=19) #저수준, 고수준이 먼저 수행되어 있어야 함
#points(eruptions.long, col="red"#색깔 pch=19#모양)
dev.off()
points(eruptions.long, col="red" pch=19) #저수준, 고수준이 먼저 수행되어 있어야 함
plot(faithful) #고수준
points(eruptions.long, col="red" pch=19) #저수준, 고수준이 먼저 수행되어 있어야 함
points(eruptions.long, col="red", pch=19) #저수준, 고수준이 먼저 수행되어 있어야 함
faithful.lm <- lm(waiting ~ eruptions, data=faithful)
faithful.lm <- lm(waiting ~ eruptions, data=faithful)
lines(x=faithful$eruptions, y=fitted(faithful.lm), col="blue")
#수직선
abline(v=3, col="purple")
abline(h=mean(faithful$waiting), col="green")
?abline
abline(faithful.lm, col="pink")
#그래프 생성 및 저장
str(cars)
plot(cars)
#plot(cars)
plot(cars$speed, cars$dist)
#x축이 factor인 경우
#
str(ToothGrowth)
plot(ToothGrowth$supp, ToothGrowth$len)
#dataframe 제공한 경우
str(iris)
plot(iris[,1:4])
source("C:/ymyang/week13-그래프.R", encoding = 'UTF-8', echo=TRUE)
#시계열데이터인 경우
str(nhtemp)
plot(nhtemp)
#모자이크
str(UCBAdmissions)
plot(UCBAdmissions)
#모델객체도 그림 그려줌
str(faithful)
faithful.lm <- lm(waiting ~ eruptions, data = faithful)
plot(faithful.lm)
#그래프 파일로 저장하기
plot(faithful)
list.files(pattern = "Rplot.jpeg")
library(pander)
openFileInOS("Rplot.jpeg")
windows(width = 12, height=8)
plot(faithful)
savePlot(filename = "Rplot2", type = "pdf")
list.files(pattern = "Rplot2.pdf")
openFileInOS("Rplot2.pdf")
png("Rplot-png", width=648, height = 432)
plot(faithful)
dev.off()
openFileInOS("Rplot-png.png")
png("Rplot3", width=648, height = 432)
plot(faithful)
dev.off()
openFileInOS("Rplot3.png")
list.files(pattern = "Rplot3.png")
png("Rplot3.png", width=648, height = 432)
plot(faithful)
dev.off()
list.files(pattern = "Rplot3.png")
openFileInOS("Rplot3.png")
list.files(pattern = "Rplot3.png")
openFileInOS("Rplot3.png")
library(pander)
png("Rplot3.png", width=648, height = 432)
plot(faithful)
dev.off()
list.files(pattern = "Rplot3.png")
openFileInOS("Rplot3.png")
#새로운 윈도우 창 만들어서 거기에 출력하고 저장함. 열어서 확인까지
windows(width = 12, height=8)
plot(faithful)
list.files(pattern = "Rplot3.png")
openFileInOS("Rplot3.png")
dev.off()
openFileInOS("Rplot3.png")
#그래프 파라미터 설정
plot(faithful)
#제목과 축
plot(faithful,
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)")
?par
#las :  the style of axis labels.
plot(faithful, las=0)
plot(faithful, las=1)
#las :  the style of axis labels.
plot(faithful, las=0)
plot(faithful, las=1)
plot(faithful, las=2)
plot(faithful, las=0)
plot(faithful, las=2)
plot(faithful, las=3)
#las :  the style of axis labels.
plot(faithful, las=0)
plot(faithful, las=3)
plot(faithful, las=1)
#las :  the style of axis labels.
plot(faithful, las=0)
plot(faithful, las=1)
plot(faithful, las=2)
plot(faithful, las=3)
#las :  the style of axis labels.
plot(faithful, las=0)
plot(faithful, bty="o")
plot(faithful, bty="n")
plot(faithful, bty="l")
plot(faithful, bty="j")
plot(faithful, bty="]")
#심볼과 선
?pch
#심볼과 선
?pch : 심볼
#21~25번은 테두리와 색깔 따로 지정 가능
plot(faithful, pch=3)
plot(faithful, pch=8)
plot(faithful, pch=8, col="green")
plot(faithful, pch=21)
plot(faithful, pch=25)
plot(faithful, pch=25, col="dimgray", bg="purple")
plot(faithful, pch=25, col="red", bg="purple")
?lty
#lty : 선
str(LakeHuron)
plot(LakeHuron)
plot(LakeHuron, lty="dotted")
plot(LakeHuron, lty="dashed")
plot(LakeHuron, lty="dotdash")
#테두리
?par
plot(LakeHuron, lty=8)
#그래프 유형
str(pressure)
plot(pressure)
plot(pressure, type="p")
plot(pressure, type="l")
#테두리
?par
#그래프 유형
?plot
#그래프 유형
?plot
plot(pressure, type="b")
plot(pressure, type="h")
plot(pressure, type="s")
plot(pressure, type="n")
plot(pressure, type="S")
plot(pressure, type="o")
x <- 1:10
y <- exp(1:10)
y1 <- exp(1:10)
y2 <- exp(10:1)
lines(x, y1, type = "o")
lines(x, y1, type = "o", pch=21, col="red")
lines(x, y2, type = "o", pch=22, col="blue")
plot(x,y1, xlab = "x", ylab="y", type="n")
lines(x, y1, type = "o", pch=21, col="red")
lines(x, y2, type = "o", pch=22, col="blue")
plot(faithful)
plot(faithful, type="n")
grid()
points(faithful, pch=19, col="blue")
plot(faithful, pch=19, col="blue")
grid()
#색상
colors()
palette()
palette(rainbow(6))
palette()
palette("default")
palette()
n <- 12
pie(rep(1, n), col=1:n)
pie(rep(1, n), col=rainbow(n))
pie(rep(1, n), col=heat.colors(n))
pie(rep(1, n), col=terrain.colors(n))
pie(rep(1, n), col=gray(level = seq(0,1,length=n)))
seq(0,1,length=12)
seq(0,1,12)
seq(0,1,length=5)
seq(0,1,length=10)
seq(0,1,length=12)
pie(rep(1, n), col=rainbow(n, alpha = seq(0,1,length=n)))
pie(rep(1, n), col=gray(level = seq(0,1,length=n),
alpha = seq(0,1,length=n)))
pie(rep(1, n), col=gray(level = seq(0,1,length=n)))
pie(rep(1, n), col=gray(level = seq(0,1,length=n),
alpha = seq(0,1,length=n)))
library(RColorBrewer)
?RColorBrewer
display.brewer.all()
display.brewer.pal(3, "Dark2")
display.brewer.pal(9, "Dark2")
display.brewer.pal(9, "Blues")
n <- 9
pie(rep(1,n), col=brewer.pal(n, "Greens"))
pie(rep(1,n), col=brewer.pal(n, "GuGn"))
pie(rep(1,n), col=brewer.pal(n, "BuGn"))
plot(faithful,pch=21, col="tomato",
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)",
col.main="navy", col.sub="purple",col.lab="royalblue",col.axis="brown"
)
#크기
#ces
x <- seq(0.5,1.5,0.25)
y <- rep(1, length(x))
plot(x,y,pch=19, cex=x,
main="Effects of cex on symbol and text size")
plot(x,y,pch=19, cex=x,col="yello"
main="Effects of cex on symbol and text size")
plot(x,y,pch=19, cex=x,col="yello",
main="Effects of cex on symbol and text size")
plot(x,y,pch=19, cex=x,col="yellow",
main="Effects of cex on symbol and text size")
plot(x,y,pch=19, cex=x,col="green",
main="Effects of cex on symbol and text size")
text(x,y+0.2, labels = x, cex=x)
text(x,y+0.1, labels = x, cex=x)
plot(x,y,pch=19, cex=x,col="green",
main="Effects of cex on symbol and text size",
cex.main=1.5, cex.lab=1.0, cex.axis=0.75)
plot(LakeHuron, lwd=1)
plot(LakeHuron, lwd=3)
#글꼴, 글씨체
windowsFonts()
plot(faithful,pch=21, col="tomato",
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)",
family="sans")
#기존 글꼴 변경하기
windowsFonts(
A=windowsFont("Arial Black"),
B=windowsFont("Book Antiqua"),
C=windowsFont("Clisto MT")
)
plot(faithful,pch=21, col="tomato",
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)",
family="C")
?par
plot(faithful,pch=21, col="cornflowerblue",
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)",
family="serif", font.main=4, font.sub=1, font.lab=3, font.axis=2)
#그래프 배치
windows()
windows(width = 12, height = 8)
plot(faithful,pch=21, col="cornflowerblue",
main="Old Faithful Geyser",
sub="Yellowstone National Park",
xlab="Eruption time(m)",
ylab="Waiting time(m)",
family="serif", font.main=4, font.sub=1, font.lab=3, font.axis=2)
par("mai")
par(mai=c(1,0.5,1,0.2))
par("mar")
#margin
par("mai")
#margin
par("mai")
par("mar")
