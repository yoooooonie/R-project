pch=as.integer(Species)+18
))
legend(x=1.2, y=2.4, legend = as.character(iris$Species), #x,y,좌표로 위치 지정
pch=1:length(levels(iris$Species))+18)
legend(x=1.2, y=2.4, legend = as.character(iris$Species), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species)+18
))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
legend(locator(1), legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
#locator 옵션 사용
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species)+18
))
legend(locator(1), legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
palette()
#색깔
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species),
col=as.integer(Species)))
legend(locator(1), legend = as.character(levels(iris$Species)), #locator 함수 호출하면 마우스로 x,y,좌표로 위치 지정가믕
pch=1:length(levels(iris$Species)),
col = 1:length(levels(iris$Species)))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=as.integer(Species))+1)
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=as.integer(Species))+1)
col=(as.integer(Species))+1)
with(iris, plot(Petal.Length, Petal.Width,
(as.integer(Species))+1
(as.integer(Species))+1
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=(as.integer(Species))+1))
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=(as.integer(Species))+1))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
library(car)
install.packages("car")
library(car)
scatterplot(mpg~wt | cyl , data=mtcars, boxplots="xy", lwd=2, pch=c(15,16,17),
col=c("red","green","blue"))
#산점도 행렬
str(iris)
plot(iris[1:2])
plot(iris[1:4])
plot(iris)
plot(iris[1:4])
pairs(iris[1:4])
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris)
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris, upper.panel=NULL)
install.packages("psych")
library(psych)
pairs.panels(iris[1:4])
points?
pairs.panels(iris[1:4], pch=21, )
?points
pairs.panels(iris[1:4], pch=21, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림림
pairs.panels(iris[1:4], pch=as.numeric(levels(iris$Species))+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림
as.numeric(levels(iris$Species))+20
pairs.panels(iris[1:4], pch=as.numeric(iris$Species)+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림
pairs.panels(iris[1:4], pch=as.numeric(iris$Species)+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE,
hist.col = "gold") #회귀선 그림
#상관계수의 통계적 유의성 확인을 위해
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(iris[1:4], pch=21,
bg=c("red","green","blue")[iris$Species],lm=TRUE)
#8-8
count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(unique(alice[n.char==i])))
}
}
count.letters(alice)
#8-8
alice <- c('Alice', 'was', 'beginning', 'to','get','very','tired','of','sitting','by','her','sister','on','the','bank',
'and','of','having','nothing','to','do','once','or','twice','she','had','peeped','into','the','book',
'her','sister','was','reding','but','it','had','no','pictures','or','conversations','in','it','and','what',
'is','the','use','of','a','book','thought','Alice','without','pictures','or','conversations')
count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(unique(alice[n.char==i])))
}
}
count.letters(alice)
ne.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(alice[n.char==i]))
}
}
ne.count.letters(alice)
to.ne.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(alice[n.char==i])
}
}
to.ne.count.letters(alice)
to.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(unique(alice[n.char==i]))
}
}
to.count.letters(alice)
#8-9
library(car)
Salaries
head(Salaries$salary)
class(Salaries$salary)
mean(Salaries$salary)
sd(Salaries$salary)
mean.salary <- mean(Salaries$salary)
mean.salary
sd.salary <- sd(Salaries$salary)
sd.salary
df9 <- Salaries$salary[(Salaries$salary>mean.salary-2*sd.salary) & (Salaries$salary<mean.salary+2*sd.salary)]
head(df9)
length(df9)
length(Salaries$salary)
mean(df9)
df9.3 <- Salaries$salary[(Salaries$salary>mean.salary-3*sd.salary) & (Salaries$salary<mean.salary+3*sd.salary)]
head(df9.3)
length(df9.3)
mean(df9.3)
cal.mean <- function(x, remove.outlier=FALSE, mult.outlier=2){
if(remove.outlier==TRUE){
outlier.index <- (x > mean(x, na.rm=TRUE) + mult.outlier * sd(x, na.rm = TRUE)) |
(x < mean(x, na.rm=TRUE) - mult.outlier * sd(x, na.rm = TRUE))
x.new <- x[!outlier.index]
result <- mean(x.new, na.rm=TRUE)
} else {
result <- mean(x, na.rm=TRUE)
}
}
cal.mean(Salaries$salary)
cal.mean <- function(x, remove.outlier=FALSE, mult.outlier=2){
if(remove.outlier==TRUE){
outlier.index <- (x > mean(x, na.rm=TRUE) + mult.outlier * sd(x, na.rm = TRUE)) |
(x < mean(x, na.rm=TRUE) - mult.outlier * sd(x, na.rm = TRUE))
x.new <- x[!outlier.index]
result <- mean(x.new, na.rm=TRUE)
} else {
result <- mean(x, na.rm=TRUE)
}
return(result)
}
cal.mean(Salaries$salary)
cal.maen(Salaries$salary, remove.outlier=TRUE)
cal.mean(Salaries$salary, remove.outlier=TRUE)
cal.mean(Salaries$salary, remove.outlier=TRUE, mult.outlier = 3)
#8-10
for (i in 1:12) {
cat('The month of',month.name[i],'\n')
}
#8-11
vector11 <- c('Superman','Batman','Spiderman')
for (i in vector11){
cat('Hello',i,'\n')
}
for (i in vector11){
cat('Hello',i,'...\n')
}
for (i in vector11){
cat('Hello',i,'\b...\n')
}
}
cat(sprintf('Hello %s...\n',i))
for (i in vector11){
cat(sprintf('Hello %s...\n',i))
}
sample(c('H',"T"))
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
nhead <- 0
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
fun12 <- function(x) sample(c('H',"T"), size=1)
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
repeat{
if(nhead>=10) break
else {
if(fun12()=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
fun12 <- function(x) sample(c('H',"T"), size=1)
nflip <- 0
nhead <- 0
repeat{
if(nhead>=10) break
else {
if(fun12()=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
nflip
?Alphabet
?Alpha
sample?
?sample
?sample
sample(LETTERS, size = 3, replace=TRUE)
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
fun13
fun13()
#8-13
nflip13 <- 0
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
while(fun13()!='ABC'){
nflip13 <- nflip13 + 1
}
nflip13
df13 <- as.data.frame(nflip13=numeric(), result=character())
df13 <- data.frame(nflip13=numeric(), result=character())
#8-13
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
nflip13 <- 0
df13 <- data.frame(nflip13=numeric(), result=character())
flag <- TRUE
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
if(result=='ABC') flag <- FALSE
}
nflip13
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
cat(nflip13, result)
if(result=='ABC') flag <- FALSE
}
nflip13
#8-13
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
nflip13 <- 0
df13 <- data.frame(nflip13=numeric(), result=character())
flag <- TRUE
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
cat(nflip13,':', result)
if(result=='ABC') flag <- FALSE
}
nflip13
#Chapter09 데이터 전처리
#9-1
x[c(1,2)] <- 2:3
#Chapter09 데이터 전처리
#9-1
x <- 5:10
x[c(1,2)] <- 2:3
x
x[-1] <- 1:5
x
x[-1]
#9-2
heavy <- mtcars[mtcars$wt > median(mtcars$wt)]
median(mtcars$wt)
mtcars[mtcars$wt > median(mtcars$wt)]
wt.index <- mtcars$wt > median(mtcars$wt)
#9-2
heavy <- mtcars[wt.index]
wt.index
#9-2
heavy <- mtcars[wt.index,]
light <- mtcars[!wt.index,]
#9-2
mtcars$weight[mtcars$wt > median(mtcars$wt)] <-'heavy'
mtcars$weight[mtcars$wt <= median(mtcars$wt)] <-'light'
head(mtcars)
tail(mtcars)
colnames(mtcars)
order(colnames(mtcars))
mtcars[,order(colnames(mtcars))]
#9-4
mtcars[mtcars$cyl=4,]
#9-4
mtcars[mtcars$cyl==4,]
mtcars[-1:4,]
#mtcars[-1:4,]
mtcars[2:4,]
mtcars[mtcars$cyl<=5]
#mtcars[mtcars$cyl<=5]
mtcars[mtcars$cyl<=5,]
mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|6, ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl in c(4|6), ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|mtcars$cyl==6), ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|mtcars$cyl==6, ]
mtcars[mtcars$cyl %in% c(4,6), ]
#9-5
mtcars[1:15]
mtcars[1:15,]
sample.index <- sample(1:nrow(iris), size=nrow(iris)*0.7)
iris[sample.index,]
library(dplyr)
slice_sample(iris, prop=0.7)
#9-7
names <- c('Gates','Jobs',"Bezos")
?apply
apply(names, nchar)
#9-7
names <- c('Gates','Jobs',"Bezos")
lapply(names, nchar)
sapply(names, nchar)
#9-8
lst1 <- list(A=matrix(1:12, nrow=3),B=matrix(1:12, nrow=2), C=1:12)
lst2 <- list(A=matrix(1:12, nrow=3),B=matrix(1:12, nrow=6), C=12:1)
mapply(lst1, lst2)
?mapply
mapply(rep, 1:4, 4:1)
mapply(equal, lst1, lst2)
mapply(equal(), lst1, lst2)
mapply(identical, lst1, lst2)
?identical
identical(lst1, lst2)
#9-9
head(state.x77)
apply(state.x77, 2, mean)
apply(state.x77, 1, mean)
apply(state.x77, 2, sd)
#9-10
nycflights13
#9-10
library(nycflights13)
#9-10
install.packages('nycflights13')
library(nycflights13)
head(flights)
str(flights)
library(dplyr)
df10 <- flights['dest','count','dist','delay']
table(flight)
table(flights)
str(mtcars)
with(mtcars,tapply(mpg, list(cyl ,am), mean))
with(mtcars,
aggregate(x=mpg, by=list(Cylincer=cyl ,Transmission=am),
FUN=mean))
aggregate(flights, Group.dest=flights$dest,
FUN=mean)
aggregate(flights, list(Group.dest=flights$dest),
FUN=mean)
aggregate(flights, list(Group.dest=flights$dest),
FUN=count)
aggregate(flights, list(Group.dest=flights$dest),
FUN=count)
aggregate(flights['dest'], list(Group.dest=flights$dest),
FUN=count)
flights
str(flights)
flights  %>%
group_by(dest) %>%
summarise(count=n(),
dist=mean(distance, na.rm=TRUE),
delay=mean(arr_delay, na.rm=TRUE)) %>%
filter(count>=50) %>%
slice_max(order_by = delay, n=10)
str(flights)
str(airlines)
str(airports)
flights %>%
select(year:day, hour, origin, dest, tailnum, carrier) %>%
left_join(airlines, by='carrier')
flights %>%
semi_join(dest.popular, by='dest') %>%
left_join(airports, by=c('dest'='faa')) %>%
select(year:day, hour, origin, dest, name, tailnum, carrier)
dest.popular <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
dest.popular <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
dest.popular
flights %>%
semi_join(dest.popular, by='dest') %>%
left_join(airports, by=c('dest'='faa')) %>%
select(year:day, hour, origin, dest, name, tailnum, carrier)
flights %>%
semi_join(dest.popular, by='dest')
#9-12
library(gapminder)
#9-12
install.packages('gapminder')
library(gapminder)
head(gapminder)
str(gapminder)
str(country_codes)
library(dplyr)
gapminder %>%
group_by(continent)
gapminder %>%
group_by(continent) %>%
summarise(cnt=n(), n.country=n_distinct(country))
gapminder %>%
group_by(continent) %>%
median(lifeExp)
gapminder %>%
filter(year==2007) %>%
group_by(continent) %>%
summarise(lifeExp.med=median(lifeExp))
gapminder %>%
filter(country %in% c('France','Korea, Rep','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
distinct(filter(country %in% c('France','Korea, Rep','United States'))) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
distinct(filter(country %in% c('France','Korea, Rep','United States')))
gapminder %>%
filter(year==2007, country %in% c('France','Korea, Rep','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
filter(year==2007, country %in% c('France','Korea, Rep.','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
#9-13
tbl1 <- tibble(name='Oliver',age=25)
tbl2 <- tibble(name=c('Oliver','Emma'), sex=c("Male",'Female'))
tbl3 <- tibble(name='Emma', grade='A')
lst <- list(age=tbl1, gender=tbl2, grade=tbl3)
lst
library(purrr)
reduce(lst, full_join)
#(b)
accumulate(lst, full_join)
#9-14
tbl1 <- tibble(name=c('Mouse','Keyboard','USB'),price=c(30000,90000,50000))
tbl2 <- tibble(part=c('Mouse','Keyboard','Monitor'), quantity=c(20,30,10))
tbl3 <- tibble(product=c('Keyboard','USB','Webcam'),makein=c('Korea','USA','China'))
lst <- list(price=tbl, quantity=tbl2, madein=tbl3)
lst
library(purrr)
by <-
reduce2(lst, list(c('name'='part'), c('name'='product')), left_join)
by <- list(c('name'='part'), c('name'='product'))
reduce2(lst,by , left_join)
#(b)
accumulate2(lst, by, left_join)
#9-14
tbl1 <- tibble(name=c('Mouse','Keyboard','USB'),price=c(30000,90000,50000))
tbl2 <- tibble(part=c('Mouse','Keyboard','Monitor'), quantity=c(20,30,10))
tbl3 <- tibble(product=c('Keyboard','USB','Webcam'),makein=c('Korea','USA','China'))
lst <- list(price=tbl, quantity=tbl2, madein=tbl3)
lst
