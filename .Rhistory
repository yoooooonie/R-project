bg=c("red","green","blue")[iris$Species],lm=TRUE)
>>>>>>> dfd9e4129c832753f1bef3ebb8adeecd6e88a3b5
#7-3
url <- "http://www.statsci.org/data/general/cherry.txt"
cherry <- read.table(url, header=TRUE)
str(cherry)
head(cherry)
mean(cherry$Height)
#7-4
url4 <- "https://www.statsci.org/data/general/flicker.txt"
eyes <- read.table(url4, header=TRUE)
str(eyes)
#7-4
url4 <- "https://www.statsci.org/data/general/flicker.txt"
eyes <- read.table(url4, header=TRUE)
str(eyes)
#7-4
url4 <- "http://www.statsci.org/data/general/flicker.txt"
eyes <- read.table(url4, header=TRUE)
str(eyes)
head(eyes)
mean(eyes[eyes$Colour==Brown])
eyes[eyes$Colour==Brown]
eyes[eyes$Colour=Brown]
subset(eyes, subset = (Colour='Brown'))
subset(eyes, subset = (Colour=='Brown'))
tail(eyes)
subset(eyes, subset = (Colour=='Brown'))
mean(subset(eyes, subset = (Colour=='Brown'))$Flicker)
#7-5
nist <- "https://www.itl.nist.gov/div898/strd/univ/data/PiDigits.dat"
head(nist)
#7-5
url5 <- "https://www.itl.nist.gov/div898/strd/univ/data/PiDigits.dat"
nist <- read.table(url5, header = TRUE)
nist <- read.table(url5)
nist <- read.table(url5, skip=60)
str(nist)
head(nist)
table(nist)
cnt <- table(nist)
percentage <- cnt/5000
percentage
#7-6
url6 <- 'http://jse.amstat.org/datasets/draft70mn.dat.txt'
df6 <- read.table(url6)
df6 <- read.table(url6, na.strings = " ")
df6 <- read.fwf(url6, widths = c(-1, rep(c(-1,3),12)),n=31)
head(df6)
tail(df6)
`rownames<-`(df6, month.abb)
rownames<-(df6, month.abb)
?rownames
rownames(df6)<-(month.abb)
month.abb
head(df6)
rownames(df6)<-month.abb
rownames(df6)
colnames(df6)<-month.abb
colnames(df6)
head(df6)
rownames(df6)
df6$day <- rownames(df6)
head(df6)
df6$Feb
df6$Feb[29]
df6$Feb[30]
median(df6$Jan)
median(df6$Dec)
median(df6$Jan, na.rm = TRUE)
median(df6$Dec, na.rm = TRUE)
#7-7
url7 <- 'https://www.airkorea.or.kr'
#7-7
library(readxl)
#7-7
install.packages('readxl')
library(readxl)
airqualSeoul <- read_excel('C:/Users/kwkan/Downloads/확정자료엑셀다운.xls',
col_types=c(rep('text',3), rep('numeric',7)), sheet=1)
warnings()
head(airqualSeoul)
subset(airqualSeoul, subset = ('측정소명'=='성북구|종로구'))
subset(airqualSeoul, subset = ('측정소명'=='성북구'))
subset(airqualSeoul, subset = (측정소명=='성북구'))
colMeans(subset(airqualSeoul, subset = (측정소명=='성북구'))['PM2.5'], na.rm=TRUE)
colMeans(subset(airqualSeoul, subset = (측정소명=='종로구'))['PM2.5'], na.rm=TRUE)
#함수
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
return(result)
}
ls()
y <- c(100,150,200)
transLength(y)
transLength
transLength
trans2
trans2(y)
#return 없애고 적재하면 리턴 값 없음 하지만 수행은 되어 있고 값은 있음
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
}
transLength(y)
print(transLength(y))
tlength <- round(x*0.9144, digits = 1)
transLength(y)
#숫자가 아닌경우 종료하기 추가
transLength <- function(x){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*0.9144, digits = 1)
paste(tlength, "m", sep="")
}
transLength("ABC")
transLength(y)
transLength
flip <- function() sample(x=c('H','T'), size=1)
nflip <- 0
nhead <- 0
nflip <- nflip+1
nflip
flip()=='H'
while (nhead<10) {
if(flip()=='H'){
nhead <- nhead+1
} else{
nhead <- 0
}
nflip <- nflip+1
}
nflip
#for (var in list) statement
for (i in seq(from=5, to=25, by=5)) print(i)
for (i in seq(from=5, to=25, by=5)) i
i <- 1
for (i in seq(from=5, to=25, by=5)) i
i <- 1
for  (i in seq(from=5, to=25, by=5)) i
i
rm(ls())
ls()
rm(ls())
rm(list=ls())
#chapter 08 함수와 논리흐름 제어
#8-1
evenodd <-function(x) if(x%2==0) x
#chapter 08 함수와 논리흐름 제어
#8-1
even <-function(x) x%2==0
#chapter 08 함수와 논리흐름 제어
#8-1
even <-function(x) (x%%2==0)
even(c(-5:5,InF, -InF, NA, NaN))
even(c(-5:5, Inf, -Inf, NA, NaN))
c(-5:5, Inf, -Inf, NA, NaN)
even(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) (x%%2==0) cnt <- cnt+1
#8-2
cnteven <- function(x) if(x%%2==0) cnt <- cnt+1
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
if(x%%2==0) {cnt <- cnt+1}
#8-2
cnteven <- function(x) {
if(val in x){
if(val %% 2 == 0) cnt <- cnt+1
}
print(cnt)
}
for(val in x){
if(val %% 2 == 0) cnt <- cnt+1
}
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
if(val %% 2 == 0) cnt <- cnt+1
}
print(cnt)
}
c(-5:5, Inf, -Inf, NA, NaN)
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
if(val %% 2 == 0) {cnt <- cnt+1}
}
print(cnt)
}
c(-5:5, Inf, -Inf, NA, NaN)
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#if(val %% 2 == 0) {cnt <- cnt+1}
}
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
#if(val %% 2 == 0) {cnt <- cnt+1}
}
print(cnt)
}
c(-5:5, Inf, -Inf, NA, NaN)
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1}
}
print(cnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1
}
print(cnt)
}
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1
}
print(cnt)
}
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1
}
print(cnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
q()
}
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1}
}
print(cnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1}
}else {cnt}
print(cnt)
}
#8-2
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1}
}else cnt
print(cnt)
}
cnteven <- function(x) {
cnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {cnt <- cnt+1}
}else cnt
print(cnt)
}
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {ecnt <- ecnt+1}
} else {ocnt <- ocnt+1}
print(ecnt)
}
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1,ocnt <- ocnt+1)
}
print(ecnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
}
print(ecnt)
print(ocnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
length(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print(ecnt)
print(ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print('ecnt',ecnt)
print('ocnt',ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print('ecnt :'+ecnt)
print('ocnt :'+ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
?print
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
cnt <- 0
for(val in x){
cnt <- cnt+1
print(cnt)
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print(ecnt)
print(ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-3
test3 <- function(ifelse(x>pi, TRUE, FALSE))
#8-3
test3 <- function(ifelse(x > pi, TRUE, FALSE))
ifelse(x > pi, TRUE, FALSE)
#8-3
test3 <- function(x){
ifelse(x > pi, TRUE, FALSE)
}
test3(c(3, 1:5))
?norm
#8-4
norm4 <- function(x){
norm(x, na.rm=TRUE)
}
#8-4
norm4 <- function(x){
norm(x, na.rm=TRUE)
}
test4 <- c(1,2,3,4,5,NA)
norm4(test4)
?sd
#8-4
norm4 <- function(x){
x <- x[!is.na(x)]
z <- (x-mean(x))/sd(x)
}
test4 <- c(1,2,3,4,5,NA)
norm4(test4)
#8-4
norm4 <- function(x){
x <- x[!is.na(x)]
z <- (x-mean(x))/sd(x)
return(z)
}
norm4(test4)
?replace
sen5 <- 'I saw her standing there; Misery: Anna (Go to him); Chains; Boys; Ask me why'
sen5
?gsub
gsub(';','',sen5)
sen5 <- 'I saw her standing there; Misery; Anna (Go to him); Chains; Boys; Ask me why'
#8-5
remove5 <- function(x, rem=';',rep=''){
gsub(rem, rep, x)
}
remove5(sen5)
str(iris[1])
class(iris[1])
#8-6
printclass <- function(x){
if(is.data.frame(x)|is.matrix(x)){
for (i in 1:ncol(x)) cat(colnames(x)[i], 'is', class(x[,i]),'/n')
}
else cat("It's neither a data frame nor a matrix.",'/n')
}
printclass(iris)
#8-6
printclass <- function(x){
if(is.data.frame(x)|is.matrix(x)){
for (i in 1:ncol(x)) cat(colnames(x)[i], 'is', class(x[,i]),'\n')
}
else cat("It's neither a data frame nor a matrix.",'\n')
}
printclass(iris)
class(iris)
class(ncol(iris[1]))
class(ncol(iris[2]))
class(ncol(iris[5]))
class(ncol(iris[6]))
printclass(LakeHuron)
#8-7
function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
med=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', med,'\b.')
}
}
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
med=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', med,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
median=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
median=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=round(mean(x, na.rm=TRUE),1)
sd=round(sd(x,na.rm = TRUE),1)
median=round(median(x,na.rm=TRUE),1)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
fun7 <- function(x, med=FALSE){
mean=round(mean(x, na.rm=TRUE),1)
sd=round(sd(x,na.rm = TRUE),1)
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
if(med==TRUE){
median=round(median(x,na.rm=TRUE),1)
cat('Also Median is', median,'\b.')
}
}
fun7(1:50, med=TRUE)
fun7(1:50)
