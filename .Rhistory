<<<<<<< HEAD
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
if(val %% 2 == 0) {ecnt <- ecnt+1}
} else {ocnt <- ocnt+1}
print(ecnt)
}
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1,ocnt <- ocnt+1)
}
print(ecnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
}
print(ecnt)
print(ocnt)
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
length(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print(ecnt)
print(ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print('ecnt',ecnt)
print('ocnt',ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
for(val in x){
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print('ecnt :'+ecnt)
print('ocnt :'+ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
?print
#8-2
cnteven <- function(x) {
ecnt <- 0
ocnt <- 0
cnt <- 0
for(val in x){
cnt <- cnt+1
print(cnt)
#if(!is.na(val %% 2 ==0)&(val %% 2 ==0)) cnt <- cnt+1
ifelse(val %% 2 == 0, ecnt <- ecnt+1, ocnt <- ocnt+1)
print(ecnt)
print(ocnt)
}
}
cnteven(c(-5:5, Inf, -Inf, NA, NaN))
#8-3
test3 <- function(ifelse(x>pi, TRUE, FALSE))
#8-3
test3 <- function(ifelse(x > pi, TRUE, FALSE))
ifelse(x > pi, TRUE, FALSE)
#8-3
test3 <- function(x){
ifelse(x > pi, TRUE, FALSE)
}
test3(c(3, 1:5))
?norm
#8-4
norm4 <- function(x){
norm(x, na.rm=TRUE)
}
#8-4
norm4 <- function(x){
norm(x, na.rm=TRUE)
}
test4 <- c(1,2,3,4,5,NA)
norm4(test4)
?sd
#8-4
norm4 <- function(x){
x <- x[!is.na(x)]
z <- (x-mean(x))/sd(x)
}
test4 <- c(1,2,3,4,5,NA)
norm4(test4)
#8-4
norm4 <- function(x){
x <- x[!is.na(x)]
z <- (x-mean(x))/sd(x)
return(z)
}
norm4(test4)
?replace
sen5 <- 'I saw her standing there; Misery: Anna (Go to him); Chains; Boys; Ask me why'
sen5
?gsub
gsub(';','',sen5)
sen5 <- 'I saw her standing there; Misery; Anna (Go to him); Chains; Boys; Ask me why'
#8-5
remove5 <- function(x, rem=';',rep=''){
gsub(rem, rep, x)
}
remove5(sen5)
str(iris[1])
class(iris[1])
#8-6
printclass <- function(x){
if(is.data.frame(x)|is.matrix(x)){
for (i in 1:ncol(x)) cat(colnames(x)[i], 'is', class(x[,i]),'/n')
}
else cat("It's neither a data frame nor a matrix.",'/n')
}
printclass(iris)
#8-6
printclass <- function(x){
if(is.data.frame(x)|is.matrix(x)){
for (i in 1:ncol(x)) cat(colnames(x)[i], 'is', class(x[,i]),'\n')
}
else cat("It's neither a data frame nor a matrix.",'\n')
}
printclass(iris)
class(iris)
class(ncol(iris[1]))
class(ncol(iris[2]))
class(ncol(iris[5]))
class(ncol(iris[6]))
printclass(LakeHuron)
#8-7
function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
med=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', med,'\b.')
}
}
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
med=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', med,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
median=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=mean(x)
sd=sd(x)
median=median(x)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
#8-7
fun7 <- function(x, med=FALSE){
mean=round(mean(x, na.rm=TRUE),1)
sd=round(sd(x,na.rm = TRUE),1)
median=round(median(x,na.rm=TRUE),1)
if(med!=TRUE){
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.')
} else {
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
cat('Also Median is', median,'\b.')
}
}
fun7(1:50)
fun7(1:50, med=TRUE)
fun7 <- function(x, med=FALSE){
mean=round(mean(x, na.rm=TRUE),1)
sd=round(sd(x,na.rm = TRUE),1)
cat('Mean is',mean,'\b, and Standard Deviation is',sd,'\b.\n')
if(med==TRUE){
median=round(median(x,na.rm=TRUE),1)
cat('Also Median is', median,'\b.')
}
}
fun7(1:50, med=TRUE)
fun7(1:50)
lst2 <- list(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
lst2
#문자가 있으면 전체가 다 문자로 바뀜
unlist(lst2)
#matrix 만들기 리스트를 벡터로 바꾸고 다음에 matrix로 변환해야함
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
#matrix 만들기 리스트를 벡터로 바꾸고 다음에 matrix로 변환해야함
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
lst
#matrix 만들기 리스트를 벡터로 바꾸고 다음에 matrix로 변환해야함
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
matrix(lst)
as.matrix(lst)
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
matrix(lst)
as.data.frame(lst) #숫자 문자 섞여서 상관없음
as.data.frame(lst2)
str(as.data.frame(lst2))
as.numeric("gold")
as.numeric(c("-1","1.414", "3.14"))
as.numeric(c("-1","1.414", "3.14", "and"))
as.character(11:15)
as.numeric(TRUE)
as.numeric(FALSE)
#vector
vec <- 1:6
as.list(vec)
list(vec)
#하나의 열을 가진 행렬 만들기
cbind(vec)
rbind(vec)
as.data.frame(vec)
as.data.frame(rbind(vec))
#matrix
mat <- matrix(1:6, 2,3)
mat
as.vector(mat)
as.list(mat)
list(mat)
as.data.frame(mat)
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
lst
unlist(lst)
as.vector(lst)
#결합 - 데이터셋 결합 | 열 결합 | 행 결합 | 공통 열에 의한 결합
#yahoo의 주가 데이터 다운로드 하여 주가 데이터 옆에 환율 데이터 까지 넣는 법
install.packages("quantmod")
#결합 - 데이터셋 결합 | 열 결합 | 행 결합 | 공통 열에 의한 결합
#yahoo의 주가 데이터 다운로드 하여 주가 데이터 옆에 환율 데이터 까지 넣는 법
#install.packages("quantmod")
#finance.yahoo.com에서 가져옴
#finance.yahoo.com: Samsung Electronics(005930.ks), KRW 개별 종목의 코드, 환율
library(quantmod)
sec <- getSymbols(Symbols = "005930.ks",
from="2021-10-01",
to="2021-12-31",
auto.assign = FALSE)
sec <- as.data.frame(sec)
str(sec)
head(sec)
head(sec[c("005930.KS.Close", "005930.KS.Volume")])
sec <- cbind(date=rownames(sec),
symbol="005930.KS",
sec[c("005930.KS.Close", "005930.KS.Volume")])
rownames(sec) <- NULL #행이름 지우기
colnames(sec)[c(3,4)] <- c("close", "volume")
head(sec)
#현대자동차 주가정보 다운로드
hmc <- getSymbols(Symbols = "005387.KS",
from="2021-10-01",
to="2021-12-31",
auto.assign = FALSE)
hmc <- as.data.frame(hmc)
head(hmc)
hmc <- cbind(date=rownames(hmc),
symbol="005387.KS",
hmc[c("005387.KS.Close", "005387.KS.Volume")])
rownames(hmc) <- NULL
colnames(hmc)[c(3,4)] <- c("close", "volume")
#행의 방향으로 결함
stock <- rbind(sec, hmc)
head(stock)
#현대자동차 주가정보 다운로드
hmc <- getSymbols(Symbols = "005387.KS",
from="2021-10-01",
to="2021-12-31",
auto.assign = FALSE)
hmc <- as.data.frame(hmc)
head(hmc)
hmc <- cbind(date=rownames(hmc),
symbol="005387.KS",
hmc[c("005387.KS.Close", "005387.KS.Volume")])
rownames(hmc) <- NULL
colnames(hmc)[c(3,4)] <- c("close", "volume")
#행의 방향으로 결함
stock <- rbind(sec, hmc)
head(stock)
stock
#데이터프레임 형태로 변환
fx <- as.data.frame(fx)
#merge로 환율 데이터 옆에 붙이기
#finance.yahoo.com
fx <- getSymbols(Symbols = "KRW=X",
from="2021-10-01",
to="2021-12-31",
auto.assign = FALSE)
#데이터프레임 형태로 변환
fx <- as.data.frame(fx)
str(fx)
head(fx["KRW=X.Close"])
fx <- cbind(date=rownames(fx),
fx[c("KRW=X.Close")])
head(fx)
rownames(fx) <- NULL
colnames(fx)[c(2)] <- "close"
#공통된 날짜 기준으로 merge
#공통 열 이름 확인
intersect(names(sec), names(fx))
report <- merge(sec, fx, by="date")
report
head(mtcars)
car <- mtcars
car["name"] <- rownames(car)
rownames(car) <- NULL
head(car)
highhp.car <- car[car$hp>145,]
highhp.car
lightwt.car <- car[car$wt<3.2,]
lightwt.car
#힘이 좋으면서 가벼운 차 위의 2dataframe 합치기
index <- match(highhp.car$name, lightwt.car$name)
index
lightwt.car[na.omit(index),]
index2 <- highhp.car$name %in% lightwt.car$name
index2
highhp.car[index2,]
#week11-1
#sort
x <- c(3,7,5,1,2,5)
sort(x)
sort(x, decreasing = TRUE)
#NA가 포함되어 있는 경우, NA는 출력되지 않음
length(x) <- 7
x
sort(x)
sort(x, na.last = TRUE)#NA가 가장 뒤에 위치
sort(x, na.last = FALSE)#NA가 가장 앞에 위치
#벡터 자체를 소팅하지 않음. 소팅되었을 때 인덱스를 출력함
y <- c(33,11,55,22,44)
order(y)
y[order(y)]
sort(y)
y <- c(33,11,55,22,44)
z <- c("Superman","Batman","Ironman","Antman","Spiderman")
df <- data.frame(y,z)
df
#y열 기준
order(df$y)
df[order(df$y),]
#내림차순
df[order(df$y,decreasing=TRUE),]
df[order(-df$y),]
y <- c(33,11,55,22,44)
z <- c("Superman","Batman","Ironman","Antman","Spiderman")
w <- c("can fly", "can not fly","can fly","cannot fly","can fly")
df <- data.frame(y,z,w)
df
df[order(df$w, df$y),]
#각 열마다 다르게 소팅하고 싶은 경우
#install.packages("dplyr")
library(dplyr)
df[order(desc(df$w),y),]
df[order(-df$w,y),]
head(mtcars)
g <- split(mtcars$mpg, f=mtcars$am)
g
mean(g[[1]])
mean(g[["Manual"]])
#am 변수를 가지고 집단으로 만들어봄
cars <- within(mtcars,
am <- factor(am,
levels = c(0,1),
labels = c("Automatic","Manual")))
head(cars)
head(mtcars)
g <- split(mtcars$mpg, f=mtcars$am)
g
g <- split(cars$mpg, f=cars$am)
g
mean(g[[1]])
mean(g[["Manual"]])
sapply(g,mean)
#처리할 벡터, 집단을 나타내는 팩터, 적용할 함수 3가지 인자 받음
tapply(X=iris$Sepal.Length, INDEX = iris$Species, FUN=mean)
tapply(X=iris$Sepal.Length, INDEX = iris$Species, FUN=length)
str(mtcars)
with(mtcars,tapply(mpg, list(cyl ,am), mean))
tapply(mtcars$mpg, list(mtcars$cyl ,mtcars$am), mean)
with(mtcars,
aggregate(x=mpg, by=list(Cylincer=cyl ,Transmission=am),
FUN=mean))
aggregate(mtcars[1:6], list(Group.cyl=mtcars$cyl ,Group.am=mtcars$am),
FUN=mean)
aggregate(iris[1:4], list(Species=iris$Species), mean)
tapply(mtcars[1:6], INDEX=list(mtcars$cyl ,mtcars$am), mean)
aggregate(iris[1:4], list(Species=iris$Species), mean)
by(data=iris[1:4], INDICES = iris$Species, FUN=mean)
by(data=iris, INDICES = iris$Species, FUN=mean)
aggregate(iris[1:4], list(Species=iris$Species), mean)
by(data=iris, INDICES = iris$Species, function(x) mean(x$Sepal.Length))
rowsum(iris[-5], iris$Species)
#범주형 변수가 주어지면 변수가 몇개인가 알려줌
table(mtcars$gear)
table(mtcars$am)
table(mtcars$am, mtcars$gear)
#균일한 구간으로 나눔
mpg.cut <- cut(mtcars$mpg, breaks = 5)
#범주형 변수가 주어지면 변수가 몇개인가 알려줌
table(mpg.cut)
#tapply(mtcars$mpg, list(mtcars$cyl ,mtcars$am), mean)
with(mtcars,tapply(mpg, list(Cylincer=cyl ,Transmission=am), mean))
xtabs(formula = ~am+gear, data=mtcars)
aggregate(formula=mpg~cyl+am, data=mtcars, FUN=mean)
library(stringr)
str_subset(airquality, subset=(Month==6))
?str_subset
if(flip()=='H'){
nhead <- nhead+1
} else{
nhead <- 0
}
unique(airquality$Month)
#중복되지 않는 값 출력
distinct(select(airquality, Month))
?dplyr
?arrange
with(airquality, order(Temp,Month,Day))
#여러 열을 지정가능 순서대로 arrange됨, 오름차순
arrange(airquality, Temp, Month, Day)
#여러 열을 지정가능 순서대로 arrange됨, 오름차순
arrange(airquality, Temp, Month, Day)
order(airquality$Temp,airquality$Month,airquality$Day))
order(airquality$Temp,airquality$Month,airquality$Day)
airquality[order(airquality$Temp,airquality$Month,airquality$Day)]
airquality[order(airquality$Temp,airquality$Month,airquality$Day),]
with(airquality, airquality[order(Temp,Month,Day),])
#
air.group <- group_by(airquality, Month)
air.group
summarise(air.group,
Mean.Temp=mean(Temp, na.rm=TRUE),
sd.Temp=sd(Temp, na.rm = TRUE),
Days=n())
#pipe operator 사용해서 똑같이 해보기
air <- airquality %>%
select( Ozone, Temp, Month) %>%
group_by(Month) %>%
summarise(Mean.ozone=mean(Ozone,na.rm=TRUE),
Mean.Temp=mean(Temp, na.rm=TRUE)) %>%
filter(Mean.ozone>40 | Mean.Temp>80)
air
#by 인수를 지정
inner_join(band_members, band_instruments, by="name")
flights  %>%
count(flights, flights$dest)
library(nycflights13)
flights  %>%
count(flights, flights$dest)
str(flights)
flights  %>%
count(flights[,'dest'], flights$dest)
=======
pch=as.integer(Species)+18
))
legend(x=1.2, y=2.4, legend = as.character(iris$Species), #x,y,좌표로 위치 지정
pch=1:length(levels(iris$Species))+18)
legend(x=1.2, y=2.4, legend = as.character(iris$Species), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species)+18
))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
legend(locator(1), legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
#locator 옵션 사용
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species)+18
))
legend(locator(1), legend = as.character(levels(iris$Species)), #x,y,좌표로 위치 지정
pch=c(1:length(levels(iris$Species)))+18)
palette()
#색깔
with(iris, plot(Petal.Length, Petal.Width,
pch=as.integer(Species),
col=as.integer(Species)))
legend(locator(1), legend = as.character(levels(iris$Species)), #locator 함수 호출하면 마우스로 x,y,좌표로 위치 지정가믕
pch=1:length(levels(iris$Species)),
col = 1:length(levels(iris$Species)))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=as.integer(Species))+1)
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=as.integer(Species))+1)
col=(as.integer(Species))+1)
with(iris, plot(Petal.Length, Petal.Width,
(as.integer(Species))+1
(as.integer(Species))+1
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=(as.integer(Species))+1))
with(iris, plot(Petal.Length, Petal.Width,
pch=19,
col=(as.integer(Species))+1))
legend(x=1.2, y=2.4, legend = as.character(levels(iris$Species)),
fill = c(1:length(levels(iris$Species)))+1)
library(car)
install.packages("car")
library(car)
scatterplot(mpg~wt | cyl , data=mtcars, boxplots="xy", lwd=2, pch=c(15,16,17),
col=c("red","green","blue"))
#산점도 행렬
str(iris)
plot(iris[1:2])
plot(iris[1:4])
plot(iris)
plot(iris[1:4])
pairs(iris[1:4])
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris)
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris, upper.panel=NULL)
install.packages("psych")
library(psych)
pairs.panels(iris[1:4])
points?
pairs.panels(iris[1:4], pch=21, )
?points
pairs.panels(iris[1:4], pch=21, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림림
pairs.panels(iris[1:4], pch=as.numeric(levels(iris$Species))+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림
as.numeric(levels(iris$Species))+20
pairs.panels(iris[1:4], pch=as.numeric(iris$Species)+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE) #회귀선 그림
pairs.panels(iris[1:4], pch=as.numeric(iris$Species)+20, bg=c("red","green","blue")[iris$Species],
lm=TRUE,
hist.col = "gold") #회귀선 그림
#상관계수의 통계적 유의성 확인을 위해
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(iris[1:4], pch=21,
bg=c("red","green","blue")[iris$Species],lm=TRUE)
#8-8
count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(unique(alice[n.char==i])))
}
}
count.letters(alice)
#8-8
alice <- c('Alice', 'was', 'beginning', 'to','get','very','tired','of','sitting','by','her','sister','on','the','bank',
'and','of','having','nothing','to','do','once','or','twice','she','had','peeped','into','the','book',
'her','sister','was','reding','but','it','had','no','pictures','or','conversations','in','it','and','what',
'is','the','use','of','a','book','thought','Alice','without','pictures','or','conversations')
count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(unique(alice[n.char==i])))
}
}
count.letters(alice)
ne.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(toString(alice[n.char==i]))
}
}
ne.count.letters(alice)
to.ne.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(alice[n.char==i])
}
}
to.ne.count.letters(alice)
to.count.letters <- function(x){
n.char <- nchar(x)
for(i in min(n.char):max(n.char)){
cat('These words have', i, 'letter(s) :\n')
print(unique(alice[n.char==i]))
}
}
to.count.letters(alice)
#8-9
library(car)
Salaries
head(Salaries$salary)
class(Salaries$salary)
mean(Salaries$salary)
sd(Salaries$salary)
mean.salary <- mean(Salaries$salary)
mean.salary
sd.salary <- sd(Salaries$salary)
sd.salary
df9 <- Salaries$salary[(Salaries$salary>mean.salary-2*sd.salary) & (Salaries$salary<mean.salary+2*sd.salary)]
head(df9)
length(df9)
length(Salaries$salary)
mean(df9)
df9.3 <- Salaries$salary[(Salaries$salary>mean.salary-3*sd.salary) & (Salaries$salary<mean.salary+3*sd.salary)]
head(df9.3)
length(df9.3)
mean(df9.3)
cal.mean <- function(x, remove.outlier=FALSE, mult.outlier=2){
if(remove.outlier==TRUE){
outlier.index <- (x > mean(x, na.rm=TRUE) + mult.outlier * sd(x, na.rm = TRUE)) |
(x < mean(x, na.rm=TRUE) - mult.outlier * sd(x, na.rm = TRUE))
x.new <- x[!outlier.index]
result <- mean(x.new, na.rm=TRUE)
} else {
result <- mean(x, na.rm=TRUE)
}
}
cal.mean(Salaries$salary)
cal.mean <- function(x, remove.outlier=FALSE, mult.outlier=2){
if(remove.outlier==TRUE){
outlier.index <- (x > mean(x, na.rm=TRUE) + mult.outlier * sd(x, na.rm = TRUE)) |
(x < mean(x, na.rm=TRUE) - mult.outlier * sd(x, na.rm = TRUE))
x.new <- x[!outlier.index]
result <- mean(x.new, na.rm=TRUE)
} else {
result <- mean(x, na.rm=TRUE)
}
return(result)
}
cal.mean(Salaries$salary)
cal.maen(Salaries$salary, remove.outlier=TRUE)
cal.mean(Salaries$salary, remove.outlier=TRUE)
cal.mean(Salaries$salary, remove.outlier=TRUE, mult.outlier = 3)
#8-10
for (i in 1:12) {
cat('The month of',month.name[i],'\n')
}
#8-11
vector11 <- c('Superman','Batman','Spiderman')
for (i in vector11){
cat('Hello',i,'\n')
}
for (i in vector11){
cat('Hello',i,'...\n')
}
for (i in vector11){
cat('Hello',i,'\b...\n')
}
}
cat(sprintf('Hello %s...\n',i))
for (i in vector11){
cat(sprintf('Hello %s...\n',i))
}
sample(c('H',"T"))
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
sample(c('H',"T"), size=1)
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
nhead <- 0
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
fun12 <- function(x) sample(c('H',"T"), size=1)
repeat{
if(nhead>=10) break
else {
if(fun12=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
repeat{
if(nhead>=10) break
else {
if(fun12()=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
fun12 <- function(x) sample(c('H',"T"), size=1)
nflip <- 0
nhead <- 0
repeat{
if(nhead>=10) break
else {
if(fun12()=='H') {
nhead <- nhead+1
} else nhead <- 0
}
nflip <- nflip + 1
}
nflip
?Alphabet
?Alpha
sample?
?sample
?sample
sample(LETTERS, size = 3, replace=TRUE)
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
fun13
fun13()
#8-13
nflip13 <- 0
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
while(fun13()!='ABC'){
nflip13 <- nflip13 + 1
}
nflip13
df13 <- as.data.frame(nflip13=numeric(), result=character())
df13 <- data.frame(nflip13=numeric(), result=character())
#8-13
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
nflip13 <- 0
df13 <- data.frame(nflip13=numeric(), result=character())
flag <- TRUE
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
if(result=='ABC') flag <- FALSE
}
nflip13
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
cat(nflip13, result)
if(result=='ABC') flag <- FALSE
}
nflip13
#8-13
fun13 <- function() paste(sample(LETTERS, size = 3, replace=TRUE), collapse = '')
nflip13 <- 0
df13 <- data.frame(nflip13=numeric(), result=character())
flag <- TRUE
while(flag){
nflip13 <- nflip13 + 1
result <- fun13()
rbind(df13, nflip13=nflip13, result=result)
cat(nflip13,':', result)
if(result=='ABC') flag <- FALSE
}
nflip13
#Chapter09 데이터 전처리
#9-1
x[c(1,2)] <- 2:3
#Chapter09 데이터 전처리
#9-1
x <- 5:10
x[c(1,2)] <- 2:3
x
x[-1] <- 1:5
x
x[-1]
#9-2
heavy <- mtcars[mtcars$wt > median(mtcars$wt)]
median(mtcars$wt)
mtcars[mtcars$wt > median(mtcars$wt)]
wt.index <- mtcars$wt > median(mtcars$wt)
#9-2
heavy <- mtcars[wt.index]
wt.index
#9-2
heavy <- mtcars[wt.index,]
light <- mtcars[!wt.index,]
#9-2
mtcars$weight[mtcars$wt > median(mtcars$wt)] <-'heavy'
mtcars$weight[mtcars$wt <= median(mtcars$wt)] <-'light'
head(mtcars)
tail(mtcars)
colnames(mtcars)
order(colnames(mtcars))
mtcars[,order(colnames(mtcars))]
#9-4
mtcars[mtcars$cyl=4,]
#9-4
mtcars[mtcars$cyl==4,]
mtcars[-1:4,]
#mtcars[-1:4,]
mtcars[2:4,]
mtcars[mtcars$cyl<=5]
#mtcars[mtcars$cyl<=5]
mtcars[mtcars$cyl<=5,]
mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|6, ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl in c(4|6), ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|mtcars$cyl==6), ]
#mtcars[mtcars$cyl==4|6, ]
mtcars[mtcars$cyl==4|mtcars$cyl==6, ]
mtcars[mtcars$cyl %in% c(4,6), ]
#9-5
mtcars[1:15]
mtcars[1:15,]
sample.index <- sample(1:nrow(iris), size=nrow(iris)*0.7)
iris[sample.index,]
library(dplyr)
slice_sample(iris, prop=0.7)
#9-7
names <- c('Gates','Jobs',"Bezos")
?apply
apply(names, nchar)
#9-7
names <- c('Gates','Jobs',"Bezos")
lapply(names, nchar)
sapply(names, nchar)
#9-8
lst1 <- list(A=matrix(1:12, nrow=3),B=matrix(1:12, nrow=2), C=1:12)
lst2 <- list(A=matrix(1:12, nrow=3),B=matrix(1:12, nrow=6), C=12:1)
mapply(lst1, lst2)
?mapply
mapply(rep, 1:4, 4:1)
mapply(equal, lst1, lst2)
mapply(equal(), lst1, lst2)
mapply(identical, lst1, lst2)
?identical
identical(lst1, lst2)
#9-9
head(state.x77)
apply(state.x77, 2, mean)
apply(state.x77, 1, mean)
apply(state.x77, 2, sd)
#9-10
nycflights13
#9-10
library(nycflights13)
#9-10
install.packages('nycflights13')
library(nycflights13)
head(flights)
str(flights)
library(dplyr)
df10 <- flights['dest','count','dist','delay']
table(flight)
table(flights)
str(mtcars)
with(mtcars,tapply(mpg, list(cyl ,am), mean))
with(mtcars,
aggregate(x=mpg, by=list(Cylincer=cyl ,Transmission=am),
FUN=mean))
aggregate(flights, Group.dest=flights$dest,
FUN=mean)
aggregate(flights, list(Group.dest=flights$dest),
FUN=mean)
aggregate(flights, list(Group.dest=flights$dest),
FUN=count)
aggregate(flights, list(Group.dest=flights$dest),
FUN=count)
aggregate(flights['dest'], list(Group.dest=flights$dest),
FUN=count)
flights
str(flights)
flights  %>%
group_by(dest) %>%
summarise(count=n(),
dist=mean(distance, na.rm=TRUE),
delay=mean(arr_delay, na.rm=TRUE)) %>%
filter(count>=50) %>%
slice_max(order_by = delay, n=10)
str(flights)
str(airlines)
str(airports)
flights %>%
select(year:day, hour, origin, dest, tailnum, carrier) %>%
left_join(airlines, by='carrier')
flights %>%
semi_join(dest.popular, by='dest') %>%
left_join(airports, by=c('dest'='faa')) %>%
select(year:day, hour, origin, dest, name, tailnum, carrier)
dest.popular <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
dest.popular <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
dest.popular
flights %>%
semi_join(dest.popular, by='dest') %>%
left_join(airports, by=c('dest'='faa')) %>%
select(year:day, hour, origin, dest, name, tailnum, carrier)
flights %>%
semi_join(dest.popular, by='dest')
#9-12
library(gapminder)
#9-12
install.packages('gapminder')
library(gapminder)
head(gapminder)
str(gapminder)
str(country_codes)
library(dplyr)
gapminder %>%
group_by(continent)
gapminder %>%
group_by(continent) %>%
summarise(cnt=n(), n.country=n_distinct(country))
gapminder %>%
group_by(continent) %>%
median(lifeExp)
gapminder %>%
filter(year==2007) %>%
group_by(continent) %>%
summarise(lifeExp.med=median(lifeExp))
gapminder %>%
filter(country %in% c('France','Korea, Rep','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
distinct(filter(country %in% c('France','Korea, Rep','United States'))) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
distinct(filter(country %in% c('France','Korea, Rep','United States')))
gapminder %>%
filter(year==2007, country %in% c('France','Korea, Rep','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
gapminder %>%
filter(year==2007, country %in% c('France','Korea, Rep.','United States')) %>%
select('country','continent') %>%
left_join(country_codes, by='country')
#9-13
tbl1 <- tibble(name='Oliver',age=25)
tbl2 <- tibble(name=c('Oliver','Emma'), sex=c("Male",'Female'))
tbl3 <- tibble(name='Emma', grade='A')
lst <- list(age=tbl1, gender=tbl2, grade=tbl3)
lst
library(purrr)
reduce(lst, full_join)
#(b)
accumulate(lst, full_join)
#9-14
tbl1 <- tibble(name=c('Mouse','Keyboard','USB'),price=c(30000,90000,50000))
tbl2 <- tibble(part=c('Mouse','Keyboard','Monitor'), quantity=c(20,30,10))
tbl3 <- tibble(product=c('Keyboard','USB','Webcam'),makein=c('Korea','USA','China'))
lst <- list(price=tbl, quantity=tbl2, madein=tbl3)
lst
library(purrr)
by <-
reduce2(lst, list(c('name'='part'), c('name'='product')), left_join)
by <- list(c('name'='part'), c('name'='product'))
reduce2(lst,by , left_join)
#(b)
accumulate2(lst, by, left_join)
#9-14
tbl1 <- tibble(name=c('Mouse','Keyboard','USB'),price=c(30000,90000,50000))
tbl2 <- tibble(part=c('Mouse','Keyboard','Monitor'), quantity=c(20,30,10))
tbl3 <- tibble(product=c('Keyboard','USB','Webcam'),makein=c('Korea','USA','China'))
lst <- list(price=tbl, quantity=tbl2, madein=tbl3)
lst
>>>>>>> 939daebd016a6d48a6a8aaf6d5f3541a23419d78
