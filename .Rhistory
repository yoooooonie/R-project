readLines(con="word.txt")
readLines(con="word.txt", n=2) #읽어올 라인 길이 입력
#what 인수에 어떤 형식으로 읽어올지 지정
scan(file = "word.txt", what = character())
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric())
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric()))
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(character(), numeric(), numeric()))
#패턴을 지정할 수 있다
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()))
#패턴을 지정할 수 있다, 특정 라인만 읽도록 지정 가능
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()),
nlines = 2)
#패턴을 지정할 수 있다, 특정 라인만 읽도록 지정 가능
scan(file = "word.txt", what = list(date=character(),
buy=numeric(),
sell=numeric()),
skip=3)
library(openxlsx)
install.packages("openxlsx")
#install.packages("openxlsx")
library(openxlsx)
read.xlsx(xlsxFile = "product.xlsx", sheet = 1)
#출력
pi
sqrt(3)
print(pi)
print(sqrt(3))
#각 인수에 적합한 형태로 출력해준다
print(matrix(c(1,2,3,4), ncol=2))
print(list("Batman","Spiderman","Ironman"))
print("The Square root of 3 is", sqrt(3), ".")
#cat은 여러 인자 받음
cat("The Square root of 3 is", sqrt(3), ".")
#이스케이프 시퀀스 지정 가능
cat("The Square root of 3 is", sqrt(3), "\b.")
#커서 다음줄로 옮기기 위한 지정 필요
cat("The Square root of 3 is", sqrt(3), "\b.","\n")
#이스케이프 시퀀스 지정 가능
cat("The Square root of 3 is", sqrt(3), "\b.")
#커서 다음줄로 옮기기 위한 지정 필요
#console에서 실행해보면 차이점 알 수 있음
cat("The Square root of 3 is", sqrt(3), "\b.","\n")
name <- "Jenny"
cat("Hello",name, "\b.\n","Isn\'t it","\t","A Lovely day")
hero <- list("Batman","Spiderman","Ironman")
cat(hero)
cat(unlist(hero))
pi
pi*100
pi/100
print(pi, digits = 3)
print(pi*100, digits = 3)
#cat 함수로 출력 자리수 지정하는 경우는 format 사용
cat(format(pi, digits = 3),"\n")
pnorm(-3:3)
#유효자리수 3개로
print(pnorm(-3:3), digits = 3)
#유효자리수 3개로 가장 낮은 숫자를 일단 맞추고 나머지를 맞춤 그래서 소수 5째 자리까지 출력
print(pnorm(-3:3), digits = 3)
z <- c(0,1.64,1.96,2.58)
ptbl <- data.frame(Z=z, Lower=pnorm(-z), Upper=pnorm(z))
ptbl
print(ptbl, digits = 3)
prime <- c(2,3,5,7,11,13,17,19)
cat(prime, file="prime.txt", sep="\t", "\n")
#기존파일에 추가하기
id <- c("A001","A002","A003")
name <- c("Mouse", "Keyboard","USB")
price <- c(30000,90000,50000)
cat(id, file = "product_cat.txt", sep="\t","\n")
cat(name, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
cat(price, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
#연결객체를 먼저 생성하고 붙이기
con <- file("product_cat2.txt", open = "w")
cat(id, file = con, sep = "\t", "\n")
cat(name, file = con, sep = "\t", "\n")
cat(price, file = con, sep = "\t", "\n")
close(con)
#출력 결과 파일로 저장
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink("Fahrenheit_output.txt")
#출력 결과 파일로 저장
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink()
head(Orange)
write.csv(x=Orange, file = "orange.csv")
#행이름 필요 없으면
write.csv(x=Orange, file = "orange.csv", row.names = FALSE)
write.table(x=Orange, file = "orange.txt", sep=";", row.names = FALSE)
write.table(x=Orange, file = "orange.txt", sep=";", row.names = FALSE)
rm(list=ls())
ls()
z <- c(0,1.64,1.96,2.58)
ptbl <- data.frame(Z=z, Lower=pnorm(-z), Upper=pnorm(z))
ptbl
#중간 데이터 저장하기
save(ptbl, file="ptbl.RData")
rm(ptbl)
ls()
ptbl
#저장된 데이터 가져오기
load("ptbl.RData")
ptbl
#파일 검색
list.files()
#하위 파일까지 검색
list.files(recursive = TRUE)
#숨겨진 파일까지 다 보고 싶다
list.files(all.files = TRUE)
#패턴 넣어서 찾기
list.files(pattern ="*.txt")
#패턴 넣어서 찾기
list.files(pattern ="*.txt")
#패턴 넣어서 찾기
list.files(pattern ="*.csv")
#패턴 넣어서 찾기
list.files(pattern = "*.txt")
#패턴 넣어서 찾기
list.files(pattern = '*.txt')
#숨겨진 파일까지 다 보고 싶다
list.files(all.files = TRUE)
#패턴 넣어서 찾기
list.files(pattern = '*.R')
#패턴 넣어서 찾기
list.files(pattern = "*.R")
list.dirs()
#경로 지정해서 찾기
list.files(path = "./examples")
#경로 지정해서 찾기
list.files(path = "./ymyang")
file.create("temp.txt")
file.exitst("temp.txt")
file.exitsts("temp.txt")
file.create("temp.txt")
file.exists("temp.txt")
file.remove("temp.txt")
file.exists("temp.txt")
#경로 지정해서 찾기
list.files(path = "./middle")
#패턴 넣어서 찾기
list.files(pattern = "*.R")
library(readr)
install.packages(readr)
library(pander)
#readr
install.packages(pander)
install.packages("tidyverse")
library(pander)
#readr
install.packages('pander')
library(pander)
#install.packages("tidyverse")
library(readr)
openFileInOS("produt.csv")
openFileInOS("product.csv")
openFileInOS("product.csv")
read_csv(file = "product.csv")
read_csv(file = "product_no_header.csv",
col_names = c('id','name','price')) #첫 행에 열이름이 없는 경우 지정
#첫 행에 열이름이 없는 경우
read_csv(file = "product_no_header.csv")
#결측값이 있는 경우 결측값이 뭔지 지정해줘야 함
read_csv(file = "product_missing.csv",
na='.')
#주석이 포함되어 있는 경우
openFileInOS("product_comment.csv")
read_csv(file = "product_comment.csv",
comment='#')
#주석을 skip 인수로 제외하고 불러올 수 있음 몇 라인 제외
read_csv(file = "product_comment.csv",
skip=1)
#구분자가 달라도 가능 구분자 지정 가능
openFileInOS("product_comment.txt")
#구분자가 달라도 가능 구분자 지정 가능
openFileInOS("product.txt")
read_delim(file = "product.txt", delim=" ")
read_delim(file = "product_no_header.csv", delim=",",
col_names = c('id','name','price'))
#고정된 열을 가지고 있는 경우
openFileInOS("product_fix.txt")
read_fwf(file = "product_fix.txt",
col_positions = fwf_empty("product_fix.txt",
col_names = c('id','name','price'))) #비어있는 부분을 기준으로 열을 가져옴
#내가 입력한 열의 개수로 열을 가져옴
read_fwf(file = "product_fix.txt",
col_positions = fwf_widths(widths = c(5,10,8),
col_names = c('id','name','price')))
#시작위치와 종료위치를 지정하면서 가져옴
read_fwf(file = "product_fix.txt",
col_positions = fwf_positions(start = c(1,6,16),
end = c(5, 15, 23)),
c('id','name','price'))
#시작위치와 종료위치를 지정하면서 가져옴
read_fwf(file = "product_fix.txt",
col_positions = fwf_positions(start = c(1,6,16),
end = c(5, 15, 23)),
col_names=c('id','name','price'))
#시작위치와 종료위치를 지정하면서 가져옴
read_fwf(file = "product_fix.txt",
col_positions = fwf_positions(start = c(1,6,16),
end = c(5, 15, 23),c('id','name','price')))
#몇개 열만 가져올 수 있음
read_fwf(file = "product_fix.txt",
col_positions = fwf_positions(start = c(6,16),
end = c(15, 23),
c('name','price')))
#시작, 종료 위치를 알면 그것만 가져올 수 있음
read_fwf(file = "product_fix.txt",
col_positions = fwf_cols(name=c(6,15),price=c(16,23)))
#필드가 공백으로 구분된 경우 편히 가져올 수 있음
read_table(file = "product_fix.txt",
col_names = c('id','name','price'))
openFileInOS("product.csv")
openFileInOS("product.txt")
read_table(file = "product.csv",
col_names = c('id','name','price'))
read_table(file = "product.txt",
col_names = c('id','name','price'))
openFileInOS("word.txt")
read_lines(file="word.txt")
#원하는 라인만 읽음
read_lines(file="word.txt", skip=1, nmax=3)
#원하는 라인만 읽음
read_lines(file="word.txt", skip=1, n_max=3)
#라인단위로 읽어올 수 있음
openFileInOS("word.txt")
read_file(file = "word.txt")
Orange
write_csv(x=Orange, file = "orange.csv")
read_csv(file="orange.csv")
write_delim(x=Orange, file = "orange2.txt", delim=";")
read_delim(file='orange2.txt', delim = ";")
#저장하기
write_lines(x=Orange$circumference, file = 'c.txt')
read_lines("c.txt")
#숫자의 앞이나 뒤에 있는 문자를 제거하고 숫자로 반환
parse_number("$100")
class(parse_number("$100"))
parse_number("30%")
parse_number("60.5Kg")
parse_number("Salary per year : $200,000")
parse_number("Salary per year : $20,000")
parse_number("Salary per year : $25,000")
parse_number("Salary per year : $25000")
parse_number("Salary per year : $2500,000")
parse_number("Salary per year : $250,000")
return(result)
#함수
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
return(result)
}
ls()
y <- c(100,150,200)
transLength(y)
#R에서는 함수역시 객체이다 다른 객체에 할당함으로 복사 가능
trans2 <- transLength
trans2
trans2(y)
#return 없애고 적재하면 리턴 값 없음
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
}
transLength(y)
print(transLength(y))
#숫자가 아닌경우 종료하기 추가
transLength <- function(x){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*0.9144, digits = 1)
paste(tlength, "m", sep="")
}
transLength("ABC")
#함수 만들어 보기
f1 <- function(x,y) {x+y}
f2 <- function(x,y) x+y
f1(1,3)
f2(1,3)
transLength <- function(x) paste(round(x*0.9144, digits = 1),"m", sep="")
transLength(y)
#길이변환 함수 만들기
transLength <- function(x, multi, unit){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = 1)
paste(tlength, unit, sep="")
}
transLength(y, multi=3, unit="ft")
transLength(y, multi=36, unit="inch")
transLength(y)
tlength <- round(x*multi, digits = 1)
#초기값 설정
transLength <- function(x, multi=0.9144, unit="m"){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = 1)
paste(tlength, unit, sep="")
}
transLength(y)
transLength(y, multi=3, unit="ft")
#내부함수 사용하는 인수들 정할 수 있다
transLength <- function(x, multi=0.9144, unit="m", ...){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, ...)
paste(tlength, unit, sep="")
}
transLength(y, digits=2)
transLength(y)
tlength <- round(x*multi, digits = digits)
#내부함수 인수 초기화
transLength <- function(x, multi=0.9144, unit="m", digits=1){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = digits)
paste(tlength, unit, sep="")
}
transLength(y)
#내부함수에 초기 함수를 설정할 수 있음
transLength <- function(x, multi=0.9144, unit="m", FUN=round, ...){
tlength <- FUN(x*multi, ...)
paste(tlength, unit, sep="")
}
transLength(y)
transLength(y, FUN=signif, digits = 3)
transLength(y, FUN=floor)
ls()
x <- 11:15
scopetest <- function(x){
cat("This is x :", x, "\n")
rm(x)
cat("This is after removing x", x, "\n")
}
scopetest(x=15:11)
#논리흐름 제어
x <- pi
y <- 3
if(x>y) x
if(x<y) x
if(x<y) x else y
if(x>y) x else y
#벡터는 조건문에 들어갈 수 없고, 들어가더라도 처음 인자만 조건에 들어감
x <- pi
y <- 1:5
if(x<y) x else y
if(x>y) x else y
#벡터 연산을 통해서
test <- c(TRUE, FALSE, TRUE, TRUE, FALSE )
yes <- 1:5
no <- 0
ifelse(test, yes, no)
x>y
ifelse(x>y, x , y)
#첫번째 조건에 따라 2번째 이후 수행
center <- function(x, type){
swtich(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)
)
}
x <- c(2,3,5,7,11,13,17,19,23,29)
center(x, "mean")
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)#절삭평균
)
#첫번째 조건에 따라 2번째 이후 수행
center <- function(x, type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)#절삭평균
)
}
center(x, "mean")
center(x, "median")
center(x, "trimmed")
center <- function(x, type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1),#절삭평균
"Choose one of mean, median, trimmed."
)
}
center(x, "other")
repeat print("hello")
i <- 5
repeat {if(i>25) break
else {print(i)
i <- i+5}
}
i <- 5
while(i<=25){
print(i)
i <- i + 5
}
#for (var in list) statement
for (i in seq(from=5, to=25, by=5)) print(i)
for  (i in seq(from=5, to=25, by=5)) i
i <- 1
for  (i in seq(from=5, to=25, by=5)) i
i
mode(1.414)
mode(c(1:3))
mode("Batman")
mode(c("Batman", "Superman","Spiderman"))
mode(factor("High","Medium","Low"))
mode(as.Date("2030-12-31"))
mode(5>2)
mode(list(1.23, "Apple",c(2,3,4,5)))
mode(data.frame(x=1:3, y=c("H","M","L")))
mode(mean)
#class 숫자로는 물리적으로 하나의 형태로 저장되더라도 동시에 여러개로 나타날 수 있다
d <- as.Date("2030-12-31")
mode(d)
length(d)
class(d)
#class가 date 이기 때문에 일반 숫자가 아니라 날짜로 인지한다
as.integer(d)
d+1
methods(print)
#변환이 불가하면 NA 출력
as.numeric(1.414)
as.integer(1.414)
as.character(1.414)
as.numeric("gold")
as.numeric(c("-1","1.414", "3.14"))
as.numeric(c("-1","1.414", "3.14", "and"))
as.character(11:15)
as.numeric(TRUE)
as.numeric(FALSE)
#vector
vec <- 1:6
vec
as.list(vec)
list(vec)
#하나의 열을 가진 행렬 만들기
cbind(vec)
as.matrix(vec)
rbind(vec)
matrix(vec, 2,3)
as.data.frame(vec)
as.data.frame(rbind(vec))
#matrix
mat <- matrix(1:6, 2,3)
mat
as.vector(mat)
as.list(mat)
list(mat)
as.data.frame(mat)
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
lst
unlist(lst)
as.vector(lst)
as.vector(unlist(lst))
lst <- list(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
lst
unlist(lst)
lst2 <- list(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
lst2
#문자가 있으면 전체가 다 문자로 바뀜
unlist(lst2)
matrix(lst2)
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst))
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
unlist(lst)
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
matrix(lst)
as.matrix(lst)
as.data.frame(lst)
as.data.frame(lst2)
str(as.data.frame(lst2))
#data frame
dfm <- data.frame(odd=c(1,3,5), even=c(2,4,6))
dfm
dfm[,1]
dfm[[1]]
str(dfm[,1])
str(dfm[[1]])
dfm[1,]
str(dfm[1,])
as.matrix(dfm)
as.vector(as.matrix(dfm))
dfm2 <- data.frame(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
dfm2
as.vector(as.matrix(dfm2))
#dataframe->list
as.list(dfm2)
as.matrix(dfm2)
