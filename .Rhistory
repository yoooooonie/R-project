openFileInOS("product.txt")
read_table(file = "product.csv",
col_names = c('id','name','price'))
read_table(file = "product.txt",
col_names = c('id','name','price'))
openFileInOS("word.txt")
read_lines(file="word.txt")
#원하는 라인만 읽음
read_lines(file="word.txt", skip=1, nmax=3)
#원하는 라인만 읽음
read_lines(file="word.txt", skip=1, n_max=3)
#라인단위로 읽어올 수 있음
openFileInOS("word.txt")
read_file(file = "word.txt")
Orange
write_csv(x=Orange, file = "orange.csv")
read_csv(file="orange.csv")
write_delim(x=Orange, file = "orange2.txt", delim=";")
read_delim(file='orange2.txt', delim = ";")
#저장하기
write_lines(x=Orange$circumference, file = 'c.txt')
read_lines("c.txt")
#숫자의 앞이나 뒤에 있는 문자를 제거하고 숫자로 반환
parse_number("$100")
class(parse_number("$100"))
parse_number("30%")
parse_number("60.5Kg")
parse_number("Salary per year : $200,000")
parse_number("Salary per year : $20,000")
parse_number("Salary per year : $25,000")
parse_number("Salary per year : $25000")
parse_number("Salary per year : $2500,000")
parse_number("Salary per year : $250,000")
return(result)
#함수
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
return(result)
}
ls()
y <- c(100,150,200)
transLength(y)
#R에서는 함수역시 객체이다 다른 객체에 할당함으로 복사 가능
trans2 <- transLength
trans2
trans2(y)
#return 없애고 적재하면 리턴 값 없음
transLength <- function(x){
tlength <- round(x*0.9144, digits = 1)
result <- paste(tlength, "m", sep="")
}
transLength(y)
print(transLength(y))
#숫자가 아닌경우 종료하기 추가
transLength <- function(x){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*0.9144, digits = 1)
paste(tlength, "m", sep="")
}
transLength("ABC")
#함수 만들어 보기
f1 <- function(x,y) {x+y}
f2 <- function(x,y) x+y
f1(1,3)
f2(1,3)
transLength <- function(x) paste(round(x*0.9144, digits = 1),"m", sep="")
transLength(y)
#길이변환 함수 만들기
transLength <- function(x, multi, unit){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = 1)
paste(tlength, unit, sep="")
}
transLength(y, multi=3, unit="ft")
transLength(y, multi=36, unit="inch")
transLength(y)
tlength <- round(x*multi, digits = 1)
#초기값 설정
transLength <- function(x, multi=0.9144, unit="m"){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = 1)
paste(tlength, unit, sep="")
}
transLength(y)
transLength(y, multi=3, unit="ft")
#내부함수 사용하는 인수들 정할 수 있다
transLength <- function(x, multi=0.9144, unit="m", ...){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, ...)
paste(tlength, unit, sep="")
}
transLength(y, digits=2)
transLength(y)
tlength <- round(x*multi, digits = digits)
#내부함수 인수 초기화
transLength <- function(x, multi=0.9144, unit="m", digits=1){
if(!is.numeric(x)) return("Not a Number")
tlength <- round(x*multi, digits = digits)
paste(tlength, unit, sep="")
}
transLength(y)
#내부함수에 초기 함수를 설정할 수 있음
transLength <- function(x, multi=0.9144, unit="m", FUN=round, ...){
tlength <- FUN(x*multi, ...)
paste(tlength, unit, sep="")
}
transLength(y)
transLength(y, FUN=signif, digits = 3)
transLength(y, FUN=floor)
ls()
x <- 11:15
scopetest <- function(x){
cat("This is x :", x, "\n")
rm(x)
cat("This is after removing x", x, "\n")
}
scopetest(x=15:11)
#논리흐름 제어
x <- pi
y <- 3
if(x>y) x
if(x<y) x
if(x<y) x else y
if(x>y) x else y
#벡터는 조건문에 들어갈 수 없고, 들어가더라도 처음 인자만 조건에 들어감
x <- pi
y <- 1:5
if(x<y) x else y
if(x>y) x else y
#벡터 연산을 통해서
test <- c(TRUE, FALSE, TRUE, TRUE, FALSE )
yes <- 1:5
no <- 0
ifelse(test, yes, no)
x>y
ifelse(x>y, x , y)
#첫번째 조건에 따라 2번째 이후 수행
center <- function(x, type){
swtich(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)
)
}
x <- c(2,3,5,7,11,13,17,19,23,29)
center(x, "mean")
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)#절삭평균
)
#첫번째 조건에 따라 2번째 이후 수행
center <- function(x, type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1)#절삭평균
)
}
center(x, "mean")
center(x, "median")
center(x, "trimmed")
center <- function(x, type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x, trim=0.1),#절삭평균
"Choose one of mean, median, trimmed."
)
}
center(x, "other")
repeat print("hello")
i <- 5
repeat {if(i>25) break
else {print(i)
i <- i+5}
}
i <- 5
while(i<=25){
print(i)
i <- i + 5
}
#for (var in list) statement
for (i in seq(from=5, to=25, by=5)) print(i)
for  (i in seq(from=5, to=25, by=5)) i
i <- 1
for  (i in seq(from=5, to=25, by=5)) i
i
mode(1.414)
mode(c(1:3))
mode("Batman")
mode(c("Batman", "Superman","Spiderman"))
mode(factor("High","Medium","Low"))
mode(as.Date("2030-12-31"))
mode(5>2)
mode(list(1.23, "Apple",c(2,3,4,5)))
mode(data.frame(x=1:3, y=c("H","M","L")))
mode(mean)
#class 숫자로는 물리적으로 하나의 형태로 저장되더라도 동시에 여러개로 나타날 수 있다
d <- as.Date("2030-12-31")
mode(d)
length(d)
class(d)
#class가 date 이기 때문에 일반 숫자가 아니라 날짜로 인지한다
as.integer(d)
d+1
methods(print)
#변환이 불가하면 NA 출력
as.numeric(1.414)
as.integer(1.414)
as.character(1.414)
as.numeric("gold")
as.numeric(c("-1","1.414", "3.14"))
as.numeric(c("-1","1.414", "3.14", "and"))
as.character(11:15)
as.numeric(TRUE)
as.numeric(FALSE)
#vector
vec <- 1:6
vec
as.list(vec)
list(vec)
#하나의 열을 가진 행렬 만들기
cbind(vec)
as.matrix(vec)
rbind(vec)
matrix(vec, 2,3)
as.data.frame(vec)
as.data.frame(rbind(vec))
#matrix
mat <- matrix(1:6, 2,3)
mat
as.vector(mat)
as.list(mat)
list(mat)
as.data.frame(mat)
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
lst
unlist(lst)
as.vector(lst)
as.vector(unlist(lst))
lst <- list(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
lst
unlist(lst)
lst2 <- list(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
lst2
#문자가 있으면 전체가 다 문자로 바뀜
unlist(lst2)
matrix(lst2)
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst))
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
#list
lst <- list(odd=c(1,3,5), even=c(2,4,6))
unlist(lst)
#matrix 만들기
matrix(unlist(lst),3,2,dimnames=list(NULL, names(lst)))
matrix(lst)
as.matrix(lst)
as.data.frame(lst)
as.data.frame(lst2)
str(as.data.frame(lst2))
#data frame
dfm <- data.frame(odd=c(1,3,5), even=c(2,4,6))
dfm
dfm[,1]
dfm[[1]]
str(dfm[,1])
str(dfm[[1]])
dfm[1,]
str(dfm[1,])
as.matrix(dfm)
as.vector(as.matrix(dfm))
dfm2 <- data.frame(odd=c(1,3,5), even=c(2,4,6), count=c("one", "two", "three"))
dfm2
as.vector(as.matrix(dfm2))
#dataframe->list
as.list(dfm2)
as.matrix(dfm2)
#결합 - 데이터셋 결합 | 열 결합 | 행 결합 | 공통 열에 의한 결합
#yahoo의 주가 데이터 다운로드 하여 주가 데이터 옆에 환율 데이터 까지 넣는 법
install.packages("quantmod")
#각 열마다 다르게 소팅하고 싶은 경우
install.packages("dplyr")
#purr map()
install.packages("purrr")
#reshape2
install.packages("reshape2")
#week12 형태변환
#tidyr- gather(), spread()
install.packages("tidyr")
#reduce
library(purrr)
#1,3에 적용 다음 5에 적용 다음 7에 적용
reduce(.x=c(1,3,5,7), .f=`*`) #연산자는 백틱? esc 아래키로 감싸서 사용
paste2 <- function(u,v,sep=".") paste(u, v, sep=sep)
letters[1:4] %>%
reduce(paste2)
#group by
head(mtcars)
library(dplyr)
mtcars.n <- mtcars %>%
group_by(cyl) %>%
nest()
library(dplyr)
mtcars.n <- mtcars %>%
group_by(cyl) %>%
nest()
library(tidyr)
mtcars.n <- mtcars %>%
group_by(cyl) %>%
nest()
mtcars.n <- mtcars %>%
group_by(cyl) %>%
nest()
mtcars.n
#pivot_longer(), pivot_wider() #tibble 형태로 됨
head(airquality)
aq.long <- pivot_longer(airquality,
cols = Ozone:Temp,
names_to = "Factor",
values_to = "Measurement")
head(aq.long)
Sepal.Length+Petal.Length
#Part2 데이터 전처리
#2장
trasform(iris, Sum.Length=Sepal.Length+Petal.Length)
iris
iris
transform(iris, Sum.Length=Sepal.Length+Petal.Length)
student_id <- ("s1","s2","s3")
student_id <- c("s1","s2","s3")
score <- c(55,90,85)
df <- data.frame(student_id,score)
?within
df <- within(df,{
grade[score<60]="가"
grade[score>=60 & score<70]="양"
grade[score>=70 & score<80]="미"
grade[score>=80 & score<90]="우"
grade[score>=100]="수"
grade=factor(grade, level=c("수","우","미","양","가"))
} )
grade[score<60] <- "가"
grade <- factor(grade, level=c("수","우","미","양","가"))
df <- within(df,{
grade[score<60] <- "가"
grade[score>=60 & score<70] <- "양"
grade[score>=70 & score<80] <- "미"
grade[score>=80 & score<90] <- "우"
grade[score>=100] <- "수"
#  grade <- factor(grade, level=c("수","우","미","양","가"))
} )
grade = factor(grade, level=c("수","우","미","양","가"))
df.ya <- within(df,{grade="ya"})
df.ya
df.ya <- within(df,{grade[score<60] = "가"})
df.ya <- within(df,{df[score<60] = "가"})
df.ya
df.ya <- within(df,{df$grade[score<60] = "가"})
df.ya
df$grade = factor(grade, level=c("수","우","미","양","가"))
df <- within(df,{
df$grade=character(0)
df$grade[score<60] = "가"
df$grade[score>=60 & score<70] = "양"
df$grade[score>=70 & score<80] = "미"
df$grade[score>=80 & score<90] = "우"
df$grade[score>=100] = "수"
df$grade = factor(grade, level=c("수","우","미","양","가"))
} )
df <- within(df,{
df$grade=character(0)
df$grade[score<60] = "가"
df$grade[score>=60 & score<70] = "양"
df$grade[score>=70 & score<80] = "미"
df$grade[score>=80 & score<90] = "우"
df$grade[score>=100] = "수"
df$grade = factor(grade, level=c("수","우","미","양","가"))
} )
df$grade[score<60] = "가"
df <- within(df,{
df$grade[score<60] = "가"
df$grade[score>=60 & score<70] = "양"
df$grade[score>=70 & score<80] = "미"
df$grade[score>=80 & score<90] = "우"
df$grade[score>=100] = "수"
df$grade = factor(grade, level=c("수","우","미","양","가"))
} )
df
df <- data.frame(student_id,score)
df
df$grade <- factor(grade, level=c("수","우","미","양","가"))
df
df <- within(df,{
df$grade[score<60] = "가"
df$grade[score>=60 & score<70] = "양"
df$grade[score>=70 & score<80] = "미"
df$grade[score>=80 & score<90] = "우"
df$grade[score>=100] = "수"
df$grade = factor(grade, level=c("수","우","미","양","가"))
} )
library(dataset)
data("USArrests")
head(USArrests)
#산점도를 통해 변수 간 상관관계 파악
pairs(USArrests, panel=panel.smooth, main="USArrests data")
#주성분분석 수행
US.prin <- princomp(USArrests, cor=TRUE)
summary(US.prin)
#screeplot그리기
plot(US.prin, type='l')
US.prin$loadings
#주성분점수
head(US.prin)
str(US.prin)
#주성분점수
US.prin$scores
#제1-2주성분에 의한 행렬도
biplot(US.prin, scale=0)
#변수축소-2
#요인분석#p65
data(swiss)
str(swiss)
#정규화 수행 및 실습 데이터 생성
Min <- apply(swiss, 2, min)
Max <- apply(swiss, 2, max)
swiss.fa <- scale(swiss, center=Min, scale=(Max-Min))
head(swiss.fa)
#요인분석 factor=3으로 줌 rotation인자는 기본값 varimax
factanal(swiss.fa, factors = 3)
#예제
head(mtcars)
test.cars <- data.frame(mtcars$mpg,mtcars$hp)
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
heatd(test.cars)
head(test.cars)
#test.cars <- data.frame(mtcars$mpg,mtcars$hp)
#위처럼 하면 행이름이 없어짐
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
#test.cars <- data.frame(mtcars$mpg,mtcars$hp)
#위처럼 하면 행이름이 없어짐
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
test.cars <- data.frame(mtcars$mpg,mtcars$hp)
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
head(test.cars)
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mpg),
hp.scale=scale(test.cars$hp))
head(test.cars)
#정규화 일반적으로 min-max
Min <- min(iris$Sepal.Length)
Max <- max(iris$Sepal.Length)
iris$SL.new <- scale(iris$Sepal.Length, center = Min, scale = Max-Min)
head(iris$SL.new)
head(iris)
Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
Datetime
a <- '12/25/2030 23:59:59'
as.POSIXct(a, format='%d/%m/%Y %H:%M:%S')
a <- '12/25/2030 23:59:59'
as.POSIXct(a, format='%d/%m/%Y %H:%M:%S')
pct <- as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m/%d, %H:%M:%S")
pct
as.POSIXct(a, format="%d/%m/%Y %H:%M:%S")
?strptime
as.POSIXct(a, format="%m/%d/%Y %H:%M:%S")
Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
Datetime
pct <- as.POSIXct(Datetime,
format='%m/%d/%Y %H:%M:%S')
with(Datetime, as.POSIXct(format='%m/%d/%Y %H:%M:%S'))
with(Datetime, as.POSIXct(Datetime, format='%m/%d/%Y %H:%M:%S'))
df$Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime
df$Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime <- data.frame(Datetime='12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime <- data.frame(Datetime=c('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59'))
df$Datetime
as.POSIXct(df$Datetime,
format='%m/%d/%Y %H:%M:%S')
df$Datetime <- strptime(df$Datetime,
format='%m/%d/%Y %H:%M:%S')
df$Datetime
df
gc()
gc()
