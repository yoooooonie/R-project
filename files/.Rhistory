US.prin <- princomp(USArrests, cor=TRUE)
summary(US.prin)
#screeplot그리기
plot(US.prin, type='l')
US.prin$loadings
#주성분점수
head(US.prin)
str(US.prin)
#주성분점수
US.prin$scores
#제1-2주성분에 의한 행렬도
biplot(US.prin, scale=0)
#변수축소-2
#요인분석#p65
data(swiss)
str(swiss)
#정규화 수행 및 실습 데이터 생성
Min <- apply(swiss, 2, min)
Max <- apply(swiss, 2, max)
swiss.fa <- scale(swiss, center=Min, scale=(Max-Min))
head(swiss.fa)
#요인분석 factor=3으로 줌 rotation인자는 기본값 varimax
factanal(swiss.fa, factors = 3)
#예제
head(mtcars)
test.cars <- data.frame(mtcars$mpg,mtcars$hp)
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
heatd(test.cars)
head(test.cars)
#test.cars <- data.frame(mtcars$mpg,mtcars$hp)
#위처럼 하면 행이름이 없어짐
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
#test.cars <- data.frame(mtcars$mpg,mtcars$hp)
#위처럼 하면 행이름이 없어짐
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
test.cars <- data.frame(mtcars$mpg,mtcars$hp)
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mtcars.mpg),
hp.scale=scale(test.cars$mtcars.hp))
head(test.cars)
test.cars <- mtcars[,c("mpg","hp")]
head(test.cars)
test.cars <- transform(test.cars,
mpg.scale=scale(test.cars$mpg),
hp.scale=scale(test.cars$hp))
head(test.cars)
#정규화 일반적으로 min-max
Min <- min(iris$Sepal.Length)
Max <- max(iris$Sepal.Length)
iris$SL.new <- scale(iris$Sepal.Length, center = Min, scale = Max-Min)
head(iris$SL.new)
head(iris)
Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
Datetime
a <- '12/25/2030 23:59:59'
as.POSIXct(a, format='%d/%m/%Y %H:%M:%S')
a <- '12/25/2030 23:59:59'
as.POSIXct(a, format='%d/%m/%Y %H:%M:%S')
pct <- as.POSIXct("2025/03/15, 15:03:04",
format="%Y/%m/%d, %H:%M:%S")
pct
as.POSIXct(a, format="%d/%m/%Y %H:%M:%S")
?strptime
as.POSIXct(a, format="%m/%d/%Y %H:%M:%S")
Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
Datetime
pct <- as.POSIXct(Datetime,
format='%m/%d/%Y %H:%M:%S')
with(Datetime, as.POSIXct(format='%m/%d/%Y %H:%M:%S'))
with(Datetime, as.POSIXct(Datetime, format='%m/%d/%Y %H:%M:%S'))
df$Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime
df$Datetime <- data.frame('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime <- data.frame(Datetime='12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59')
df$Datetime <- data.frame(Datetime=c('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59'))
df$Datetime
as.POSIXct(df$Datetime,
format='%m/%d/%Y %H:%M:%S')
df$Datetime <- strptime(df$Datetime,
format='%m/%d/%Y %H:%M:%S')
df$Datetime
df
gc()
gc()
strptime
df$Datetime <- data.frame(Datetime=c('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59'))
df6$Datetime <- data.frame(Datetime=c('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59'))
df6 <- data.frame(Datetime=c('12/25/2030 23:59:59', '1/25/2031 23:59:59', '2/25/2031 23:59:59'))
df6$Datetime
df6$Datetime <- strptime(df6$Datetime,
format='%m/%d/%Y %H:%M:%S')
df6
str(df6)
#Week9 날짜
Sys.Date() #현재날짜
class(Sys.Date())#별도의 형식
date()
Sys.time()
#YYYY-MM-DD or YYYY/MM/DD의 형태인 경우 날짜 객체로 변환해줌
as.Date("2025-12-31")#날짜 객체로 변환해줌
as.Date("2025/12/31")#날짜 객체로 변환해줌
as.Date("12/31/2025", format("%m/%d/%Y")) #형식이 안 맞는 경우 format 지정해줘야함
d <- as.Date("2025-12-31")
d
format(d, format="%m/%d/%Y")
today <- Sys.Date()
today
format(today, format="%Y/%m/%d %A %a")
d <- as.Date("2025-12-31")
d
weekdays(d)
#날짜도 연산이 가능함, 벡터 연산도 됨
d+7
d+1:7
#6-12
#seq() 함수를 이용하여 2030년 6월 1일부터 7일간의 날짜를 생성하고 다음과 같은 형식으로 출력하시오.
day <- as.Date('2030/6/1',format='%Y/%m/%d')
day
#데이터 확인
head(USArrests)
0:7
day+0:7
#6-12
#seq() 함수를 이용하여 2030년 6월 1일부터 7일간의 날짜를 생성하고 다음과 같은 형식으로 출력하시오.
start <- as.Date('2030/6/1',format='%Y/%m/%d')
?strptime
weekdays(d+1:7)
d <- as.Date("2025-12-31")
d
weekdays(d)
#날짜도 연산이 가능함, 벡터 연산도 됨
d+7
d+1:7
weekdays(d+1:7)
start <- as.Date("2025-01-01")
end <- as.Date("2025-01-31")
seq(start, end, by=1)
seq(start, by=1, length.out=7)
seq(start, by="7 days", length.out=7)
seq(start, by="week", length.out=7)
seq(start, by="month", length.out=7)
seq(start, by="year", length.out=7)
seq(start, by="10 years", length.out=7)
#2월은 조심하기
seq(from=as.Date("2025-01-30"), by="month", length.out=6)
months()
#months()
#quarters()
qrt <- seq(start, by="3 months", length.out=4)
quarters(qrt)
months(qrt)
end <- start+7
end
end <- start+7
end
end <- start+6
end
seq(start, end, by=1, format='%a')
seq(start, end=start+6, by=1, format='%a %m%d')
seq(start, by=1, format='%a %m%d', length.out=7)
seq(start, by=1, format='%a-%m%d', length.out=7)
#6-12
#seq() 함수를 이용하여 2030년 6월 1일부터 7일간의 날짜를 생성하고 다음과 같은 형식으로 출력하시오.
#'토 0601'
start <- as.Date('2030/6/1',format='%Y/%m/%d')
seq(start, by=1, format='%a-%m%d', length.out=7)
#6-12
#seq() 함수를 이용하여 2030년 6월 1일부터 7일간의 날짜를 생성하고 다음과 같은 형식으로 출력하시오.
#'토 0601'
start <- as.Date('2030/6/1',format='%Y/%m/%d')
format(seq(start, by=1, length.out=7) , format='%a-%m%d')
#6-12
#seq() 함수를 이용하여 2030년 6월 1일부터 7일간의 날짜를 생성하고 다음과 같은 형식으로 출력하시오.
#'토-0601'
start <- as.Date('2030/6/1',format='%Y/%m/%d')
format(seq(start, by=1, length.out=7) , format='%a-%m%d')
strptime("2025-12-31", format="%Y-%m-%d")
class(strptime("2025-12-31", format="%Y-%m-%d"))
strptime("2025-12-31", format="%Y-%m-%d")$year+1900
moon <- as.POSIXct("1969/7/20, 20:17:39", format="%Y/%m/%d, %H:%M:%S",
tz="UTC")
#따로 있는 경우
y <- 2020
m <- 12
d <- 31
ISOdate(y,m,d)
class(ISOdate(y,m,d))
moon <- as.POSIXct("1969/7/20, 20:17:39", format="%Y/%m/%d, %H:%M:%S",
tz="UTC")
moon
class(moon)
moon+ 60*60*2
moon+ 60*60*24*7
moon- 60*60*24*7
as.Date(moon)+7
today <- Sys.Date()
Dooly <- as.Date("1983-4-22")
difftime(today, Dooly, units="days")
difftime(today, Dooly, units="weeks")
isTRUE(Dooly>today)
Sys.time() > moon
Sys.Date() > moon
Sys.Date() > as.Date(moon)
#날짜 lubridate/루브리데이트/
install.packages("lubridate")
#날짜 lubridate/루브리데이트/
#install.packages("lubridate")
library(lubridate)
today()
now()
ymd("2030-3-15")
mdy("3-15-2030")
dmy("15032030")
dmy("1532030")
mdy("March 15th, 2030") #이건 안되넹 , locale을 바꾸고 실행하면 정상 동작
Sys.setlocale("LC_TIME","C")
mdy("March 15th, 2030") #이건 안되넹 , locale을 바꾸고 실행하면 정상 동작
Sys.setlocale()
#quarter 분기
datetime <- ymd_hms("1969/07/20, 20:17:39")
datetime
semester(datetime)
quarter(datetime)
am(datetime)
pm(datetime)
#반올림, 내림, 올림
datetime
round_date(datetime, unit = "year")
ceiling_date(datetime, unit = "month")
mars <- ymd("2021/02/18")
mars
mars-moon
moon<- ymd("1969/07/20")
mars-moon
class(interval(moon, mars))
moon %--% mars
as.period(moon %--% mars)
library(rubridate)
library(lubridate)
date6 <- ymd('2030/12/25','2031/1/25','2032/2/25')
date6
Sys.setlocale("LC_TIME","C")
month(date6, label=TRUE)
format(date6,format='%B %D, %Y')
date6 <- as.Date('2030/12/25','2031/1/25','2032/2/25')
date6
date6 <- as.Date(c('2030/12/25','2031/1/25','2032/2/25'))
date6
Sys.setlocale("LC_TIME","C")
format(date6,format='%B %D, %Y')
format(date6,'%B %D, %Y')
date6 <- as.Date(c('2030-12-25','2031-1-25','2032-2-25'))
date6
Sys.setlocale("LC_TIME","C")
format(date6,'%B %D, %Y')
format(date6,'%B %d, %Y')
Sys.setlocale()#원래 기본 상태로 돌아옴
?strptime
library(stringr)
sentences[1:3]
?str_sub
str_replace_all(sentences[1:3], "the|The", replacement = "THE" )
#6-15
#다음 텍스트를 날짜 데이터로 변환하시오(lubridate 패키지 사용)
d1 <- 'January 1,2030'
d2 <- '2030-Mar-21'
d3 <- c('August 15(2030)','July 17 (2030)')
d4 <- '7-Jun-2030'
d5 <- '12/30/30'
library(lubridate)
mdy(d1)
as.Date(mdy(d1))
ymd(d2)
Sys.setlocale("LC_TIME","C")
ymd(d2)
as.Date(d2)
ymd(d2)
Sys.setlocale()
mdy(d3)
as.Date(mdy(d3))
ymd(d2)
Sys.setlocale("LC_TIME","C")
ymd(d2)
as.Date(ymd(d2))
Sys.setlocale()
mdy(d3)
as.Date(mdy(d3))
dmy(d4)
as.date(dmy(d4))
as.Date(dmy(d4))
mdy(d5)
as.Date(mdy(d5))
sen3 <- sentences[1:3]
sen3
str_replace_all(sen3, "the|The", replacement = "THE" )
str_replace_all(sen3, fixed('the', ignore_case = TRUE),"THE")
Sys.setlocale()
mdy(d1)
Sys.setlocale("LC_TIME","C")
mdy(d1)
as.Date(mdy(d1))
ymd(d2)
as.Date(ymd(d2))
mdy(d3)
as.Date(mdy(d3))
Sys.setlocale()
dmy(d4)
as.Date(dmy(d4))
mdy(d5)
as.Date(mdy(d5))
#Week10
#입력
#데이터 프레임 형태로 불러옴
read.csv(file="product.csv")
#Week10
#입력
#데이터 프레임 형태로 불러옴
read.csv(file="C:/R/files/product.csv")
#Week10
#입력
#데이터 프레임 형태로 불러옴
getwd()
setwd('C:/R/files')
read.csv(file="product.csv")
?read.csv%
?read.csv
read.csv(file="filesproduct_no_header.csv")
read.table(file = "product.txt", header=TRUE)
read.table(file = "product_colon.txt", header=TRUE, sep=":")
#행이름 설정
read.table('brand-eval.csv', header = TRUE, row.names = 'BrandID', sep=',')
#행이름 설정
read.table('brand-eval.csv', header = TRUE, row.names = 'BrandID', sep=',',
colClasses = c("chracter","chracter",'numeric','numeric','numeric'))
#행이름 설정
read.table('brand-eval.csv', header = TRUE, row.names = 'BrandID', sep=',',
colClasses = c("character","character",'numeric','numeric','numeric'))
#데이터구조가 복잡하고 정형화되지 않은 경우
readLines(con="word.txt")
readLines(con="word.txt", n=2) #읽어올 라인 길이 입력
#readr
#install.packages('pander')
library(pander)
openFileInOS("product.csv")
#주석을 skip 인수로 제외하고 불러올 수 있음 몇 라인 제외
read_csv(file = "product_comment.csv",
skip=1)
#install.packages("tidyverse")
library(readr)
#주석을 skip 인수로 제외하고 불러올 수 있음 몇 라인 제외
read_csv(file = "product_comment.csv",
skip=1)
#주석이 포함되어 있는 경우
openFileInOS("product_comment.csv")
#주석을 skip 인수로 제외하고 불러올 수 있음 몇 라인 제외
read_csv(file = "product_comment.csv",
skip=2)
5,10,8
#내가 입력한 열의 개수로 열을 가져옴
read_fwf(file = "product_fix.txt",
col_positions = fwf_widths(widths = c(5,10,8),
col_names = c('id','name','price')))
#고정된 열의 너비를 가지고 있는 경우
openFileInOS("product_fix.txt")
#필드가 공백으로 구분된 경우 편히 가져올 수 있음
read_table(file = "product_fix.txt",
col_names = c('id','name','price'))
read_table(file = "product.txt",
col_names = c('id','name','price'))
read_lines(file="word.txt")
name <- "Jenny"%
name <- "Jenny"
cat("Hello",name, "\b.\n","Isn\'t it","\t","A Lovely day")
cat("Hello",name, "\b,\n","Isn\'t it","\t","A Lovely day")
hero <- list("Batman","Spiderman","Ironman")
#리스트는 바로 출력 불가 unlist 사용
cat(hero)
cat(unlist(hero))
#파일로 저장하기
prime <- c(2,3,5,7,11,13,17,19)
cat(prime, file="prime.txt", sep="\t", "\n")
#기존파일에 추가하기
id <- c("A001","A002","A003")
name <- c("Mouse", "Keyboard","USB")
price <- c(30000,90000,50000)
cat(id, file = "product_cat.txt", sep="\t","\n")
cat(name, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
cat(price, file = "product_cat.txt", sep="\t",append = TRUE, "\n")
#연결객체를 먼저 생성하고 붙이기
con <- file("product_cat2.txt", open = "w")
cat(id, file = con, sep = "\t", "\n")
cat(name, file = con, sep = "\t", "\n")
cat(price, file = con, sep = "\t", "\n")
close(con)
#출력 결과 파일로 저장
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink("Fahrenheit_output.txt")
#출력 결과 파일로 저장
sink("Fahrenheit_output.txt")
fah <- readline("Fahrenheit ?")
fah <- as.numeric(fah)
print(paste("Fahrenheit=", fah))
cel <- (fah-32)/1.8
print(paste("Celsius=",cel))
sink()
#출력 결과 파일로 저장
sink("Fahrenheit_output.txt")
source('FahToCel.R')
sink()
#출력 결과 파일로 저장
sink("Fahrenheit_output.txt", append = TRUE)
source('FahToCel.R')
sink()
head(Orange)
sink()
head(Orange)
write.csv(x=Orange, file = "orange.csv")
rm(list=ls())
#행이름 필요 없으면
write.csv(x=Orange, file = "orange.csv", row.names = FALSE)
write.table(x=Orange, file = "orange.txt", sep=";", row.names = FALSE)
z <- c(0,1.64,1.96,2.58)
ptbl <- data.frame(Z=z, Lower=pnorm(-z), Upper=pnorm(z))
ptbl
#중간 데이터 저장하기
save(ptbl, file="ptbl.RData")
rm(ptbl)
ls()
#저장된 데이터 가져오기
load("ptbl.RData")
ptbl
d
#파일 검색
list.files()
#하위 파일까지 검색
list.files(recursive = TRUE)
#숨겨진 파일까지 다 보고 싶다
list.files(all.files = TRUE)
#패턴 넣어서 찾기
list.files(pattern = "*.R")
list.dirs()
#경로 지정해서 찾기
list.files(path = "./middle")
dput(ptbl, file='ptbl.txt')
#dput(ptbl, file='ptbl.txt')
dump(ptbl, file='ptbl.txt')
#dput(ptbl, file='ptbl.txt')
dump('ptbl', file='ptbl.txt')
library(readr)
#기본 패키지에 포함된 Orange 이고 데이터프레임 형식
Orange
write_csv(x=Orange, file = "orange.csv")
read_csv(file="orange.csv")
write_delim(x=Orange, file = "orange2.txt", delim=";")
read_delim(file='orange2.txt', delim = ";")
#저장하기
write_lines(x=Orange$circumference, file = 'c.txt')
read_lines("c.txt")
#Chapter07 입력과 출력
#7-1
d1 <- c(21.0, 18.2)
d2 <- c(14.8, 14.7, 14.0, 13.8)
d4 <- c(10.9, 10.6, 10.5)
d3 <- c(10.9, 10.6, 10.5)
d4 <- c(9.7,9.2)
KPL <- c(d1,d2,d3,d4)
KPL
KPL$model <- c(rep('A',2), rep('B',4),rep('C',3),rep('D',2))
rep('A',2), rep('B',4),rep('C',3),rep('D',2)
model <- c(rep('A',2), rep('B',4),rep('C',3),rep('D',2))
df1 <- as.data.frame(KPL, model)
df1 <- data.frame(KPL, model)
df1
KPL
KPL
rm(list())
rm(list=ls())
#Chapter07 입력과 출력
#7-1
d1 <- c(21.0, 18.2)
d2 <- c(14.8, 14.7, 14.0, 13.8)
d3 <- c(10.9, 10.6, 10.5)
d4 <- c(9.7,9.2)
KPL <- c(d1,d2,d3,d4)
KPL
model <- c(rep('A',2), rep('B',4),rep('C',3),rep('D',2))
df1 <- data.frame(KPL, model)
df1
#7-2
print(pi, digits = 20)
format(pi, 20)
format(pi, digits=20)
pi
